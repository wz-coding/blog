import{_ as r,r as a,o as l,c as p,b as e,w as s,d as i,e as t,f as d}from"./app-40c9110a.js";const u={},k=i(`<h1 id="运算规则" tabindex="-1"><a class="header-anchor" href="#运算规则" aria-hidden="true">#</a> 运算规则</h1><p>在了解了 JS 中的变量和运算符后，还应当知道这些运算符是如何对不同的变量进行计算求值的，它们之间有又着怎样的计算规则？理解清楚这其中的规则将会对开发工作十分有用</p><h2 id="运算元与运算符" tabindex="-1"><a class="header-anchor" href="#运算元与运算符" aria-hidden="true">#</a> 运算元与运算符</h2><p>在了解运算规则之前要首先了解一些基本的运算概念</p><h3 id="运算元" tabindex="-1"><a class="header-anchor" href="#运算元" aria-hidden="true">#</a> 运算元</h3><p><strong>运算元</strong>是指运算符应用的对象。例如：<code>1 + 2</code>，有两个运算元：左运算元 <code>1</code> 和右运算元 <code>2</code>。这两个运算元也可称为运算参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="一元运算符" tabindex="-1"><a class="header-anchor" href="#一元运算符" aria-hidden="true">#</a> 一元运算符</h3><p>当运算符对应的运算元只有一个时，那么这个运算符就是 <strong>一元运算符</strong>，例如代表数字正负的 <code>+</code>、<code>-</code> 一元运算符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二元运算符" tabindex="-1"><a class="header-anchor" href="#二元运算符" aria-hidden="true">#</a> 二元运算符</h3><p>当一个运算符有两个运算元时，那么这个运算符就是 <strong>二元运算符</strong>，例如最常见的加法运算就使用了二元运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>

<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符的优先级" tabindex="-1"><a class="header-anchor" href="#运算符的优先级" aria-hidden="true">#</a> 运算符的优先级</h2><p>当一个表达式只有一个运算符时，就会按照基本的运算法则执行运算，当表达式中有多个运算符时，就要按照运算符的 <strong>优先级</strong> 来执行计算了</p><h3 id="优先级列表" tabindex="-1"><a class="header-anchor" href="#优先级列表" aria-hidden="true">#</a> 优先级列表</h3><p>在包含有多个运算符的表达式中，运算符的优先级越高，那么就越优先执行这个运算符及所对应的运算元的计算，下面的表格展示了各运算符对应的优先级（数字越大则优先级越高）</p><table><thead><tr><th>优先级</th><th>运算符类型</th><th>运算顺序</th><th>运算符</th></tr></thead><tbody><tr><td>19</td><td>分组</td><td>/</td><td><code>( xxx... )</code></td></tr><tr><td>18</td><td>成员访问</td><td>从左到右</td><td><code>x.x</code></td></tr><tr><td>18</td><td>需计算的成员访问</td><td>从左到右</td><td><code>xxx[x]</code></td></tr><tr><td>18</td><td>new（带参数列表）</td><td>/</td><td><code>new( xxx )</code></td></tr><tr><td>18</td><td>函数调用</td><td>从左到右</td><td><code>xxx()</code></td></tr><tr><td>18</td><td>可选链（Optional chaining）</td><td>从左到右</td><td><code>?.</code></td></tr><tr><td>17</td><td>new（无参数列表）</td><td>从右到左</td><td><code>new</code></td></tr><tr><td>16</td><td>后置递增</td><td>/</td><td><code>++</code></td></tr><tr><td>16</td><td>后置递减</td><td>/</td><td><code>--</code></td></tr><tr><td>15</td><td>逻辑非 (!)</td><td>从右到左</td><td><code>!</code></td></tr><tr><td>15</td><td>按位非 (~)</td><td>从右到左</td><td><code>~</code></td></tr><tr><td>15</td><td>一元加法 (+)</td><td>从右到左</td><td><code>+</code></td></tr><tr><td>15</td><td>一元减法 (-)</td><td>从右到左</td><td><code>-</code></td></tr><tr><td>15</td><td>前置递增</td><td>从右到左</td><td><code>++</code></td></tr><tr><td>15</td><td>前置递减</td><td>从右到左</td><td><code>--</code></td></tr><tr><td>15</td><td>typeof</td><td>从右到左</td><td><code>typeof</code></td></tr><tr><td>15</td><td>void</td><td>从右到左</td><td><code>void</code></td></tr><tr><td>15</td><td>delete</td><td>从右到左</td><td><code>delete</code></td></tr><tr><td>15</td><td>await</td><td>从右到左</td><td><code>await</code></td></tr><tr><td>14</td><td>幂 (**)</td><td>从右到左</td><td><code>**</code></td></tr><tr><td>13</td><td>乘法 (*)</td><td>从左到右</td><td><code>*</code></td></tr><tr><td>13</td><td>除法 (/)</td><td>从左到右</td><td><code>/</code></td></tr><tr><td>13</td><td>取余 (%)</td><td>从左到右</td><td><code>%</code></td></tr><tr><td>12</td><td>加法 (+)</td><td>从左到右</td><td><code>+</code></td></tr><tr><td>12</td><td>减法 (-)</td><td>从左到右</td><td><code>-</code></td></tr><tr><td>11</td><td>按位左移 (&lt;&lt;)</td><td>从左到右</td><td><code>&lt;&lt;</code></td></tr><tr><td>11</td><td>按位右移 (&gt;&gt;)</td><td>从左到右</td><td><code>&gt;&gt;</code></td></tr><tr><td>11</td><td>无符号右移 (&gt;&gt;&gt;)</td><td>从左到右</td><td><code>&gt;&gt;&gt;</code></td></tr><tr><td>10</td><td>小于 (&lt;)</td><td>从左到右</td><td><code>&lt;</code></td></tr><tr><td>10</td><td>小于等于 (&lt;=)</td><td>从左到右</td><td><code>&lt;=</code></td></tr><tr><td>10</td><td>大于 (&gt;)</td><td>从左到右</td><td><code>&gt;</code></td></tr><tr><td>10</td><td>大于等于 (&gt;=)</td><td>从左到右</td><td><code>&gt;=</code></td></tr><tr><td>10</td><td>in</td><td>从左到右</td><td><code>in</code></td></tr><tr><td>10</td><td>instanceof</td><td>从左到右</td><td><code>instanceof</code></td></tr><tr><td>9</td><td>相等 (==)</td><td>从左到右</td><td><code>==</code></td></tr><tr><td>9</td><td>不相等 (!=)</td><td>从左到右</td><td><code>!=</code></td></tr><tr><td>9</td><td>一致/严格相等 (===)</td><td>从左到右</td><td><code>===</code></td></tr><tr><td>9</td><td>不一致/严格不相等 (!==)</td><td>从左到右</td><td><code>!==</code></td></tr><tr><td>8</td><td>按位与 (&amp;)</td><td>从左到右</td><td><code>&amp;</code></td></tr><tr><td>7</td><td>按位异或 (^)</td><td>从左到右</td><td><code>^</code></td></tr><tr><td>6</td><td>按位或 (|)</td><td>从左到右</td><td><code>|</code></td></tr><tr><td>5</td><td>逻辑与 (&amp;&amp;)</td><td>从左到右</td><td><code>&amp;&amp;</code></td></tr><tr><td>4</td><td>逻辑或 (||)</td><td>从左到右</td><td><code>||</code></td></tr><tr><td>4</td><td>空值合并 (??)</td><td>从左到右</td><td><code>??</code></td></tr><tr><td>3</td><td>条件（三元）运算符</td><td>从右到左</td><td><code>xxx ? xxx : xxx</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>+=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>-=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>**=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>*=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>/=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>%=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>&lt;&lt;=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>&gt;&gt;=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>&gt;&gt;&gt;=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>&amp;=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>^=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>|=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>&amp;&amp;=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>||=</code></td></tr><tr><td>2</td><td>赋值</td><td>从右到左</td><td><code>??=</code></td></tr><tr><td>1</td><td>逗号 / 序列</td><td>从左到右</td><td><code>,</code></td></tr></tbody></table>`,18),h=t("p",null,[d("从上表可以看出分组运算符 "),t("code",null,"( )"),d(" 优先级最高，但是在某些情况下并不会优先计算，例如")],-1),m=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token keyword"},"let"),d(" a"),t("span",{class:"token punctuation"},";"),d(),t("span",{class:"token comment"},"//undefined"),d(`
`),t("span",{class:"token keyword"},"let"),d(" b "),t("span",{class:"token operator"},"="),d(" a "),t("span",{class:"token operator"},"&&"),d(),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"2"),d(),t("span",{class:"token operator"},"+"),d(),t("span",{class:"token number"},"5"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),d(`
console`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),d("b"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),d("  "),t("span",{class:"token comment"},"//undefined"),d(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),g=t("p",null,[d("上面的例子中并没有计算 "),t("code",null,"(2 + 5)"),d("，而是直接返回了a（"),t("code",null,"undefined"),d("），上面这种运算方式叫做短路运算（计算顺序从左往右），但当左运算元为假值时，就会直接返回，不再往后计算了。因此在遇到短路运算时应当注意")],-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"},v=t("h2",{id:"计算不同类型的数据",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#计算不同类型的数据","aria-hidden":"true"},"#"),d(" 计算不同类型的数据")],-1),x=t("p",null,"在开发中我们经常会遇到对不同类型的数据进行运算，特别是加法运算，在左右运算元都是数字的情况下我们可以很容易的得出计算结果，但是当左右运算元是不同类型的情况下，计算就开始变得复杂起来了，但是也会遵循一定的计算规则",-1),_=t("h3",{id:"运算过程",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#运算过程","aria-hidden":"true"},"#"),d(" 运算过程")],-1),f=t("p",null,"理解图中的运算过程，将会极大的帮助我们解决开发过程中遇到的计算问题",-1),w=t("p",null,[d("原始类型：JS 中的原始类型也叫基本类型，包括 "),t("code",null,"null"),d("、"),t("code",null,"undefined"),d("、"),t("code",null,"Boolean"),d("、"),t("code",null,"Number"),d("、"),t("code",null,"String"),d("、"),t("code",null,"BigInt"),d("、"),t("code",null,"Symbol")],-1);function y(N,j){const n=a("Minfo"),o=a("ExternalLinkIcon"),c=a("Mermaid");return l(),p("div",null,[k,e(n,{type:"warning"},{default:s(()=>[h,m,g]),_:1}),e(n,null,{default:s(()=>[t("p",null,[d("更多关于运算符优先级的信息请 "),t("a",b,[d("点击这里"),e(o)])])]),_:1}),v,x,_,e(c,{id:"mermaid-956",code:"eJxLL0osyFAIceJSUFAw0HjateDZ5qkv9k94vm66pq6unaGGxtO57U927HraN//p8u7nG3c/ndetqQlSbKirC1H3tLX5aU+rTVKR3dMJq5+unf58zbInOzYBNSsYa7xs3vti75pnvYtARsCkwNqNgQpMNOBiz7r3POtbimHwkx29WAw2RTH32dQNQEmwVlOgVrDw0wl9YH09rUCtfol+QE1mGkAaqyqgYXBjgArNUUMBHDBAYSMNoFHP5nQ+Xb/zxcaF0JAASRoBJS00Xmxofj5lhUJZYk5pqn+awrNpO4FGgOUtdPWe7578bN4coCVgRyEFpR4wiCFqdJ9NB1sK8xW6SqAlljBLSvKDS4oy89KRbbEkwhZLYmwxNNB41rX05ZSZmlwA/0AX9g=="}),f,e(n,null,{default:s(()=>[w]),_:1})])}const B=r(u,[["render",y],["__file","04.html.vue"]]);export{B as default};
