import{_ as t,r as p,o as e,c as o,e as n,f as s,b as c,d as l}from"./app-638e6571.js";const i={},u=n("h1",{id:"flat-原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#flat-原理","aria-hidden":"true"},"#"),s(" flat 原理")],-1),r=n("p",null,[n("code",null,"flat()"),s(" 方法是我们在处理数组使经常用到的将多维数组展开的方法，它可以快速按照需要的展开层级将多维数组展开，下面会探究 "),n("code",null,"flat()"),s(" 方法的实现原理。")],-1),k=n("h2",{id:"实现原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实现原理","aria-hidden":"true"},"#"),s(" 实现原理")],-1),d={href:"https://262.ecma-international.org/13.0/?_gl=1*qwct4d*_ga*MTgzNjYzMjg5Ny4xNzEzMjgwNTU3*_ga_TDCK4DWEPP*MTcxNjY0OTQ0NC4yLjEuMTcxNjY0OTYxOC4wLjAuMA..",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"flat()",-1),v=l(`<blockquote><p>When the flat method is called, the following steps are taken:</p><ol><li>Let O be ? ToObject(this value).</li><li>Let sourceLen be ? LengthOfArrayLike(O).</li><li>Let depthNum be 1.</li><li>If depth is not undefined, then</li></ol><ul><li>Set depthNum to ? ToIntegerOrInfinity(depth).</li><li>If depthNum &lt; 0, set depthNum to 0.</li></ul><ol start="5"><li>Let A be ? ArraySpeciesCreate(O, 0).</li><li>Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).</li><li>Return A.</li></ol></blockquote><h2 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h2><p>上面引用的一系列步骤详细说明了 <code>flat()</code> 的实现标准，下面按照这个标准来实现一个 <code>flat()</code> 方法。</p><p>具体实现代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myFlat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">depth</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//第一步，获取 this 上下文，并将之转换为对象，这里由于 this 已经是对象了，所以跳过这个步骤</span>

    <span class="token comment">//第二步，获取并保存数组的长度</span>
    <span class="token keyword">let</span> sourceLen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length 
    
    <span class="token comment">//第三步，定义 depthNum 变量，初始值为 1</span>
    <span class="token keyword">let</span> depthNum <span class="token operator">=</span> <span class="token number">1</span>
    
    <span class="token comment">//第四步，如果传入的 depth 参数有值存在，将之赋值给 depthNum</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>depth <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       depthNum <span class="token operator">=</span> <span class="token operator">+</span>depth <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">+</span>depth
    <span class="token punctuation">}</span>
    <span class="token comment">//第五步，创建一个数组用来保存展开的结果</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">//第六步，这里的逻辑相当于 FlattenIntoArray 方法，具体执行对数组每一项展开的逻辑</span>
    <span class="token comment">//浅拷贝数组</span>
    <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">]</span>
    <span class="token comment">//循环遍历数组</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//取出数组开头的元素，数组长度会减一</span>
      <span class="token keyword">let</span> current <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">//判断取出的元素是否是数组并且展开的深度是否大于1</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> depth <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token comment">//将当前元素数组展开并添加到拷贝数组的开头</span>
         source<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>current<span class="token punctuation">)</span>
         <span class="token comment">//展开后展开深度参数减一</span>
         depth<span class="token operator">--</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
         <span class="token comment">//向最终结果数组里面添加元素</span>
         result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//第七步，返回 数组展开后的结果</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">myFlat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// (6) [1, 2, 3, 4, 5, {a :1 }]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">myFlat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// (6) [1, 2, 3, [4, [5]] {a :1 }]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有另外一种更加简洁的实现方式，利用 <code>Array.prototype.reduce()</code> 方法实现，具体实现代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myFlat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">depth <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//reduce方法会对数组的每一项执行传入的回调函数，回调函数的参数是上一次回调函数返回的</span>
    <span class="token comment">//结果和当前元素</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">flat<span class="token punctuation">,</span> toFlatten</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> flat<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>toFlatten<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> depth <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flat</span><span class="token punctuation">(</span>toFlatten<span class="token punctuation">,</span> depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> toFlatten<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">myFlat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// (6) [1, 2, 3, 4, 5, {a :1 }]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">myFlat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// (6) [1, 2, 3, [4, [5]] {a :1 }]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function b(h,f){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,r,k,n("p",null,[n("a",d,[s("ECMA (262)"),c(a)]),s(" 标准中关于 "),m,s(" 的实现步骤如下：")]),v])}const _=t(i,[["render",b],["__file","07.html.vue"]]);export{_ as default};
