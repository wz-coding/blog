import{_ as n,o as s,c as a,d as e}from"./app-a299c166.js";const t={},p=e(`<h1 id="vue3-生命周期" tabindex="-1"><a class="header-anchor" href="#vue3-生命周期" aria-hidden="true">#</a> Vue3 生命周期</h1><p>生命周期是 Vue 中的一个重要概念，它描述了 Vue 组件从创建到销毁的整个过程，实际上是向我们暴露了组件代码在执行期间各个阶段的不同状态。我们可以利用 Vue 在不同生命周期状态下提供的钩子函数（hooks），向其中加入自己的逻辑，从而实现各种不同的功能。</p><h2 id="生命周期分类" tabindex="-1"><a class="header-anchor" href="#生命周期分类" aria-hidden="true">#</a> 生命周期分类</h2><p>这里所展示的组件的生命周期主要以 Vue3 组合式 API 为准，它们分别是：</p><ul><li><code>onBeforeMount()</code>：在组件被挂载之前调用。此时组件的响应式状态（即组件内部的数据）已经设置完成，渲染函数也已经首次完成调用，但是组件还没有渲染到页面上生成真实的 DOM。</li><li><code>onMounted()</code>：在组件已经挂载后调用。此时组件已经渲染到了页面上（即组件已经在页面上生成了真实的 DOM，这个时候可以访问到组件的 DOM 元素）。</li><li><code>onBeforeUpdate()</code>：在组件的响应式状态（即组件的数据）发生变化时调用。此时响应式状态已经改变但是组件对应的真实 DOM 还没有更新渲染。</li><li><code>onUpdated</code>：在组件的响应式状态（即组件的数据）发生变化并且组件的 DOM 也已经更新完成后调用。</li><li><code>onBeforeUnmount()</code>：在组件被卸载之前调用。此时组件实例依然存在，组件还具有完整的功能。</li><li><code>onUnmounted()</code>：在组件的实例被卸载之后调用。此时组件的实例已经被移除（与组件相关的响应式作用已经停止）。</li><li><code>onActived()</code>：在使用 <code>&lt;KeepAlive&gt;</code> 内置组件时，当被缓存的组件激活时调用。此时缓存的组件被插入到 DOM 树中。</li><li><code>onDeactived()</code>：在使用 <code>&lt;KeepAlive&gt;</code> 内置组件时，当被缓存的组件失活时调用。此时缓存的组件被从 DOM 树中移除。</li></ul><h2 id="setup-函数" tabindex="-1"><a class="header-anchor" href="#setup-函数" aria-hidden="true">#</a> setup() 函数</h2><p>在 Vue3 的组件的生命周期中，我们并没有看到与组件创建时相关的两个生命周期：</p><ul><li><code>beforeCreate()</code>：在组件被创建之前调用。此时组件的响应式状态还没有设置，组件没有被挂载也没有被渲染。</li><li><code>created()</code>：在组件被创建后调用。此时组建的响应式状态已经设置完成，组件没有被挂载也没有被渲染。</li></ul><p>以上两个生命周期在 Vue3 中被 <strong><code>setup()</code></strong> 函数 <strong>替代</strong> 了。<code>setup()</code> 函数的作用是配合组合式 API，为我们提供用于创建各种组合逻辑、创建各种响应式数据、创建函数以及使用生命周期钩子等能力的地方。</p><h3 id="setup-用法" tabindex="-1"><a class="header-anchor" href="#setup-用法" aria-hidden="true">#</a> setup 用法</h3><p><code>setup()</code> 函数只会在组件挂载时执行一次，它有两种用法：</p><ol><li>作为 <code>&lt;script&gt;</code> 标签的属性来使用（即 <code>setup()</code> 函数的语法糖）。<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

   <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>作为函数使用。<code>setup</code> 在作为函数使用时，它的返回值有 2 种情况： <ul><li>返回一个函数，这个返回的函数会作为组件的渲染函数（<code>render()</code>）。<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
   <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
         <span class="token comment">//返回一个 vnode 对象</span>
         <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>返回一个对象，对象中的数据将会暴露给模板使用。<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
   <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
         text
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="setup-参数" tabindex="-1"><a class="header-anchor" href="#setup-参数" aria-hidden="true">#</a> setup 参数</h3><p><code>setup()</code> 函数有 2 个参数，它们分别是：</p><ul><li><code>props</code>：组件的属性，它包含了组件定义时使用到的数据</li><li><code>setupContext</code>：组件的上下文对象，它包含了与组件本身的接口相关的数据。组件上下文对象种共有 4 个属性： <ul><li><code>attrs</code>：当为组件传递 props 数据时，当传递了没有显示声明在组件的 props 对象中的数据时，这些没有显示声明的数据会被存储到 attrs 中。</li><li><code>slots</code>：组件接收到的插槽，用来渲染自定义内容。</li><li><code>emit</code>：用来发射自定义事件的函数。</li><li><code>expose</code>：用来显示的向外暴露组件内部的状态或者数据的函数。</li></ul></li></ul>`,15),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","02.html.vue"]]);export{d as default};
