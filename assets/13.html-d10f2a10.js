import{_ as i,r as c,o as l,c as u,b as a,w as p,d as o,e as n,f as s}from"./app-d97a9e14.js";const d={},r=o(`<h1 id="this-指向" tabindex="-1"><a class="header-anchor" href="#this-指向" aria-hidden="true">#</a> this 指向</h1><p><strong>this</strong> 的指向是 JS 中一个十分重要的知识，理解清楚 <code>this</code> 的指向问题可以帮助我们更好的理解 JS 中代码的运行逻辑，避免许多不必要的错误</p><h2 id="什么是this" tabindex="-1"><a class="header-anchor" href="#什么是this" aria-hidden="true">#</a> 什么是this</h2><p><strong>this</strong> 关键字我们在开发需求编写代码时经常会用到它，但是 <code>this</code> 的理解却比较抽象，下面引用一段 w3school 对于 <code>this</code> 关键字的描述：</p><blockquote><p>In JavaScript, the this keyword refers to an object.</p><p>Which object depends on how this is being invoked (used or called).</p><p>The this keyword refers to different objects depending on how it is used</p></blockquote><p>简单来说，<code>this</code> 可以理解为它是一个对象，代表了函数的调用者（函数的执行上下文），而 <code>this</code> 的值则取决于这个函数是如何被调用的（即运行时绑定）</p><h2 id="为什么用this" tabindex="-1"><a class="header-anchor" href="#为什么用this" aria-hidden="true">#</a> 为什么用this</h2><p>可以先观察下面一段代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//我有一个电话，自带充电器，充电器只能给我的电话充电</span>
<span class="token keyword">const</span> myPhone <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">battery</span><span class="token operator">:</span><span class="token string">&quot;50%&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">charge</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token comment">//将当前电话的电量充满到100%</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>battery <span class="token operator">=</span> <span class="token string">&quot;100%&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//你也有一个电话，但是没有充电器</span>
<span class="token keyword">const</span> yourPhone <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">battery</span><span class="token operator">:</span><span class="token string">&quot;30%&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">//我的电话电量不足，需要充电</span>
myPhone<span class="token punctuation">.</span><span class="token function">charge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//电量充满了100% </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myPhone<span class="token punctuation">.</span>battery<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 100%</span>

<span class="token comment">//你也想充电，但是不想重新买充电器，只好从我这里借用了充电器</span>
myPhone<span class="token punctuation">.</span><span class="token function">charge</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>yourPhone<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//电量也充满了100%</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yourPhone<span class="token punctuation">.</span>battery<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//100%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码可以看出，使用 <code>this</code> 关键字使我们能够读取到当前执行上下文的属性或者方法，使方法的运行结果能够符合我们的预期，极大的方便了我们对于代码的重复利用</p><h2 id="确定this指向" tabindex="-1"><a class="header-anchor" href="#确定this指向" aria-hidden="true">#</a> 确定this指向</h2><p><strong>this</strong> 的指向通常可以分为以下两类：</p><ul><li>全局环境：<br> 在全局环境中 <code>this</code> 指向的是全局对象，浏览器中指向了全局对象 <code>window</code>，NodeJs中指向了全局对象 <code>global</code>，严格模式下则是 <code>undefined</code></li><li>函数环境： 在函数环境（局部环境）中 <code>this</code> 的指向就要看这个函数是如何被调用的，不同的调用方式会导致 <code>this</code> 的指向不同</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;Blob&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// this = person;  //这里会报错，this 指向不能这样更改</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// John（this 指向了全局对象 window）</span>

<span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Blob （this 指向了普通对象 person）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),k=n("p",null,[n("code",null,"this"),s(" 指向是在函数运行时确定的，而不是在函数定义时确定，并且在函数执行时，"),n("code",null,"this"),s(" 指向一旦被确定就不能再进行更改")],-1),v=o(`<h2 id="改变this指向" tabindex="-1"><a class="header-anchor" href="#改变this指向" aria-hidden="true">#</a> 改变this指向</h2><p>函数在被调用时，this 的指向并非是固定不变的，JS 中为我们提供了 3 种方法来改变 this 的指向：</p><ul><li><p><code>call()</code>：以给定的 <code>this</code> 值和逐个提供的参数调用该函数</p></li><li><p><code>apply()</code>：以给定的 <code>this</code> 值和作为数组（或类数组对象）提供的 <code>arguments</code> 调用该函数</p></li><li><p><code>bind()</code>：创建一个新函数，当调用该新函数时，它会调用原始函数并将其 <code>this</code> 关键字设置为给定的值，同时，还可以逐个传入参数，这些参数会插入到调用新函数时传入的参数的前面</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
     <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> num<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
counter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1</span>

<span class="token keyword">const</span> newCounter <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token comment">// call() 方法改变 this 指向</span>
counter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>newCounter<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newCounter<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span>

<span class="token comment">// apply() 方法改变 this 指向</span>
counter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>newCounter<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newCounter<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span>

<span class="token keyword">const</span> newAdd <span class="token operator">=</span> counter<span class="token punctuation">.</span>add<span class="token punctuation">;</span>
<span class="token comment">//直接调用方法 this 指向全局</span>
<span class="token function">newAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &quot;01&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>

<span class="token comment">// bind() 方法改变 this 指向</span>
<span class="token keyword">const</span> bindAdd <span class="token operator">=</span> <span class="token function">newAdd</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>newCounter<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bindAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newCounter<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),m=n("p",null,[s("更多关于 "),n("code",null,"call"),s("、"),n("code",null,"apply"),s("、"),n("code",null,"bind"),s(" 的信息请点击这里：")],-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",target:"_blank",rel:"noopener noreferrer"},g=o(`<h2 id="绑定规则" tabindex="-1"><a class="header-anchor" href="#绑定规则" aria-hidden="true">#</a> 绑定规则</h2><p>对函数的调用方式不同，<code>this</code> 指向的绑定也有所不同，可以分为以下几类：</p><ul><li>默认绑定</li><li>隐式绑定</li><li>显式绑定</li><li><code>new</code> 绑定</li></ul><h3 id="默认绑定" tabindex="-1"><a class="header-anchor" href="#默认绑定" aria-hidden="true">#</a> 默认绑定</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// foo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，函数 <code>foo</code> 被直接调用，似乎不能直接看出它的调用者，但 <code>foo</code> 函数还是输出了结果，这样的调用方式就是典型的对 <code>this</code> 进行了默认绑定<br> 像上面这样直接调用函数，并且在调用函数时函数名称前面不加 <code>.</code> 修饰符，此时的 <code>this</code> 绑定就只能应用 <strong>默认绑定</strong> 的规则，将 <code>this</code> 指向全局对象</p><h3 id="隐式绑定" tabindex="-1"><a class="header-anchor" href="#隐式绑定" aria-hidden="true">#</a> 隐式绑定</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;bar&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">child</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;baz-child&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bar<span class="token punctuation">.</span>foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>
bar<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// obj</span>

baz<span class="token punctuation">.</span>child<span class="token punctuation">.</span>foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>
baz<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  baz-child</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，函数 <code>foo</code> 都是作为了对象的方法被调用，由于有了调用者，<code>this</code> 就指向了调用它的对象，这就是 <strong>隐式绑定</strong>，并且在函数调用时，无论函数名称前面的调用链有多长，<code>this</code> 总是指向最后一个调用者（与函数名称紧挨着的那个）</p><h3 id="显式绑定" tabindex="-1"><a class="header-anchor" href="#显式绑定" aria-hidden="true">#</a> 显式绑定</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;baz&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//baz</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//baz</span>

<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//baz</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们通过使用 <code>call()</code>、<code>apply()</code>、<code>bind()</code> 函数来手动更改 <code>this</code> 的指向，将 <code>this</code> 指向了我们所决定的对象，这样的方式就是 <strong>显式绑定</strong> ，显式绑定中 <code>this</code> 总是指向这3个函数中传入的第一个参数</p><h3 id="new-绑定" tabindex="-1"><a class="header-anchor" href="#new-绑定" aria-hidden="true">#</a> new 绑定</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>

<span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//全局对象</span>

<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//foo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，通过 <code>new</code> 关键字创建了一个对象，使函数的 <code>this</code> 指向了这个新创建的对象，这样的方式就是 <strong>new 绑定</strong></p>`,15),y=n("code",null,"function",-1),w=n("code",null,"new",-1),_=n("code",null,"new",-1),j={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new",target:"_blank",rel:"noopener noreferrer"},q=o(`<h3 id="绑定优先级" tabindex="-1"><a class="header-anchor" href="#绑定优先级" aria-hidden="true">#</a> 绑定优先级</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span>Foo
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&quot;obj1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//obj1 //隐式绑定</span>

obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">&quot;obj2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//obj2 //显式绑定</span>

<span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj1<span class="token punctuation">.</span>foo</span><span class="token punctuation">(</span><span class="token string">&quot;obj3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//obj3  //new绑定</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上代码可以看出 <code>this</code> 绑定的优先级为：<code>new</code>绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定</p>`,3);function x(z,C){const e=c("Minfo"),t=c("ExternalLinkIcon");return l(),u("div",null,[r,a(e,null,{default:p(()=>[k]),_:1}),v,a(e,null,{default:p(()=>[m,n("ul",null,[n("li",null,[n("a",b,[s("call"),a(t)])]),n("li",null,[n("a",h,[s("apply"),a(t)])]),n("li",null,[n("a",f,[s("bind"),a(t)])])])]),_:1}),g,a(e,null,{default:p(()=>[n("p",null,[s("在 JS 中，由 "),y,s(" 关键字声明的函数都可以当作构造函数来使用，通过 "),w,s(" 关键字来创建它的实列对象。更多关于 "),_,s(" 的信息请"),n("a",j,[s("点击这里"),a(t)])])]),_:1}),q])}const N=i(d,[["render",x],["__file","13.html.vue"]]);export{N as default};
