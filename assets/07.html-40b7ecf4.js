import{_ as p,r as o,o as c,c as l,e as n,f as s,b as t,w as e,d as u}from"./app-253976bb.js";const i={},r=u(`<h1 id="watch-侦听器" tabindex="-1"><a class="header-anchor" href="#watch-侦听器" aria-hidden="true">#</a> watch 侦听器</h1><p><code>watch</code> 侦听器是 Vue3 中的一个重要特性，它可以监测数据的变化，并在它们发生变化时调用传入的回调函数来帮助我们完成一些其他操作。</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><p><code>watch</code> 侦听器接收 3 个参数：</p><ul><li>第一个参数是我们要侦听的数据（响应式数据对象、getter 函数、前面两种数据组成的数组）</li><li>第二个参数是回调函数，当数据发生变化时，回调函数会被调用</li><li>第三个参数是可选的： <ul><li><code>immediate</code>：一个布尔值，表示是否在侦听开始之后立即调用回调函数</li><li><code>deep</code>：一个布尔值，表示是否深度侦听，即是否在侦听数据对象时，递归地侦听其所有属性</li><li><code>once</code>：一个布尔值，表示是否只调用一次回调函数，即在侦听开始之后立即调用回调函数，然后停止侦听</li><li><code>flush</code>：一个字符串，表示回调函数的调用时机，可以是 <code>pre</code>（表示在 DOM 更新之前调用）、<code>post</code>（表示在 DOM 更新之后调用）、<code>sync</code>（表示同步调用）</li></ul></li></ul><h3 id="监听响应式数据对象" tabindex="-1"><a class="header-anchor" href="#监听响应式数据对象" aria-hidden="true">#</a> 监听响应式数据对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">watch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj changed&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newValue ==&gt;&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> <span class="token string">&#39;oldValue ==&gt;&#39;</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// obj changed</span>
<span class="token comment">// newValue ==&gt; { count: 1 }</span>
<span class="token comment">// oldValue ==&gt; { count: 0 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听-getter-函数" tabindex="-1"><a class="header-anchor" href="#监听-getter-函数" aria-hidden="true">#</a> 监听 getter 函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj.count changed&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newValue ==&gt;&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> <span class="token string">&#39;oldValue ==&gt;&#39;</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// obj.count changed</span>
<span class="token comment">// newValue ==&gt; 1</span>
<span class="token comment">// oldValue ==&gt; 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听多个数据" tabindex="-1"><a class="header-anchor" href="#监听多个数据" aria-hidden="true">#</a> 监听多个数据</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count<span class="token punctuation">,</span> num<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>newValue1<span class="token punctuation">,</span> newValue2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>oldValue1<span class="token punctuation">,</span> oldValue2<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj.count or num changed&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newValue1 ==&gt;&#39;</span><span class="token punctuation">,</span> newValue1<span class="token punctuation">,</span> <span class="token string">&#39;newValue2 ==&gt;&#39;</span><span class="token punctuation">,</span> newValue2<span class="token punctuation">,</span> <span class="token string">&#39;oldValue1 ==&gt;&#39;</span><span class="token punctuation">,</span> oldValue1<span class="token punctuation">,</span> <span class="token string">&#39;oldValue2 ==&gt;&#39;</span><span class="token punctuation">,</span> oldValue2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
num<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// obj.count or num changed</span>
<span class="token comment">// newValue1 ==&gt; 1</span>
<span class="token comment">// newValue2 ==&gt; 1</span>
<span class="token comment">// oldValue1 ==&gt; 0</span>
<span class="token comment">// oldValue2 ==&gt; 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h2>`,12),d=n("code",null,"watch",-1),k=n("p",null,[n("code",null,"watch"),s(" 也是懒执行的，即只有在侦听开始之后，才会执行传入的回调函数。它同样有着自身内部的 effect 方法，用于控制回调函数的执行。")],-1),v=n("p",null,"以下是简单的代码实现：",-1),m=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1);function b(h,g){const a=o("RouterLink");return c(),l("div",null,[r,n("p",null,[d,s(" 侦听器的实现原理是利用了 Vue 的 "),t(a,{to:"/blog-vue/01.html"},{default:e(()=>[s("响应式系统")]),_:1}),s("。在响应式系统中，通过 "),t(a,{to:"/blog-vue/01.html#%E6%89%A7%E8%A1%8C%E5%89%AF%E4%BD%9C%E7%94%A8%E5%87%BD%E6%95%B0"},{default:e(()=>[s("effect")]),_:1}),s(" 方法来执行传入的回调函数。")]),k,v,m])}const f=p(i,[["render",b],["__file","07.html.vue"]]);export{f as default};
