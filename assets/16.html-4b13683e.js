import{_ as l,r as e,o as d,c as r,e as n,f as s,b as a,w as t,d as o}from"./app-d9256beb.js";const u={},h=o(`<h1 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h1><p>事件循环机制（Event Loop）是 Javascript 中十分重要的概念，它是 JS 运行机制的核心，决定了 JS 代码的执行顺序，理解事件循环机制将能够帮助我们更加深入的理解 JS 中各种事件的运行原理，也会对代码优化有很大的帮助</p><h2 id="单线程的js" tabindex="-1"><a class="header-anchor" href="#单线程的js" aria-hidden="true">#</a> 单线程的JS</h2><p>JS 是单线程语言，代码的执行顺序是从上到下执行，这意味着它在任何给定时刻只能执行一个任务</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// foo</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的简单示例中会在控制台先输出 <code>1</code>，接着再输出 <code>foo</code>，然后再输出 <code>hello</code>，代码是从上到下的顺序执行的，一次输出一个结果，前一个方法（任务）执行完成后再执行下一个方法（任务），而不会同时输出所有的结果</p><h3 id="为什么是单线程" tabindex="-1"><a class="header-anchor" href="#为什么是单线程" aria-hidden="true">#</a> 为什么是单线程</h3><p>JS 最根本的目的便是实现用户与浏览器之间的交互，试想一下，如果 JS 是多线程的话，当一个线程中的代码在获取某个 <code>DOM</code> 元素，而另外一个线程的代码又在删除这个 <code>DOM</code> 元素，那么这两种操作就会产生冲突，导致一系列复杂的同步问题，所以为了避免上述的问题以及一些其他的复杂问题，JS 只能是单线程的</p><h2 id="同步和异步" tabindex="-1"><a class="header-anchor" href="#同步和异步" aria-hidden="true">#</a> 同步和异步</h2><p>当代码越来越复杂时，执行某个方法可能就会耗费大量时间，如果按照顺序来执行，那么这些耗时的方法（任务）不执行完成，后续的一系列方法（任务）都会处于等待状态中，如果迟迟无法得到结果，就会造成页面卡顿，极大影响了用户体验</p><p>为了避免上述的问题，JS 将我们编写的代码分为了两类情况：<strong>同步任务</strong> 和 <strong>异步任务</strong></p><h3 id="同步任务" tabindex="-1"><a class="header-anchor" href="#同步任务" aria-hidden="true">#</a> 同步任务</h3>`,12),k=n("h3",{id:"异步任务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异步任务","aria-hidden":"true"},"#"),s(" 异步任务")],-1),m=n("p",null,[s("异步任务是执行后无法立即得到结果，需要等待一段时间才能得到结果，例如：向服务器请求接口数据、定时器、响应鼠标键盘操作的事件等，异步任务一般都会使用 "),n("strong",null,"回调函数"),s(" 作为参数，用以处理这些异步任务的返回结果，异步任务在主线程之外执行，它的回调函数会被添加到 "),n("strong",null,"消息队列"),s(" 中，当主线程中的所有同步任务都执行完成后，会从消息队列中取出已完成的异步任务的回调函数加入调用栈中并执行")],-1),g=n("p",null,[n("strong",null,"回调函数"),s("：回调函数是一种特殊类型的函数，它被作为参数传递给另一个函数，并在某个特定的事件或条件发生时被调用执行。回调函数的工作方式类似于“我告诉你要做的事情，当你完成时，请告诉我”。它允许你定义一些代码，并在某个操作完成后通知你")],-1),f=n("p",null,[n("strong",null,"消息队列"),s("：JS 在运行时（运行环境下）会有一个等待处理的消息队列（也可以称为任务队列），每个消息都关联一个异步操作的回调函数，遵循先进先出的规则")],-1),v=o(`<h2 id="什么是事件循环" tabindex="-1"><a class="header-anchor" href="#什么是事件循环" aria-hidden="true">#</a> 什么是事件循环</h2><p><strong>事件循环</strong> 的概念非常简单。它是一个在 JS 引擎等待任务，执行任务和进入休眠状态等待更多任务这几个状态之间转换的无限循环</p><p>事件循环的伪代码形式就像下面这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">waitForMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//同步的等待任务</span>
  queue<span class="token punctuation">.</span><span class="token function">processNextMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//处理任务</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="宏任务与微任务" tabindex="-1"><a class="header-anchor" href="#宏任务与微任务" aria-hidden="true">#</a> 宏任务与微任务</h3><p>在理解事件循环的具体运行机制前，需要先了解什么是宏任务与微任务</p><ul><li><strong>宏任务</strong>： 宏任务（macro task）是相对于微任务的称呼，宏任务包括：<code>&lt;script&gt;</code> 整体代码、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>Ajax</code>、<code>DOM</code> 事件，每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）</li><li><strong>微任务</strong>： 微任务（micro task）包括：<code>process.nextTick</code>、<code>MutationObserver</code>、<code>Promise.then</code> <code>catch finally</code>，微任务可以理解是在当前 task 执行结束后立即执行的任务</li></ul>`,7),b=n("p",null,"微任务队列：在任务队列中还分微任务队列与宏任务队列，里面对应存放微任务与宏任务",-1),_=o('<h3 id="事件循环流程" tabindex="-1"><a class="header-anchor" href="#事件循环流程" aria-hidden="true">#</a> 事件循环流程</h3><p>事件循环的大致过程如下：</p><ol><li>从 <strong>宏任务</strong> 队列中按照入队顺序，找到第一个要执行的宏任务（例如 <code>script</code> 整体代码），放入调用栈执行</li><li>执行完当前宏任务下的所有同步任务后（此时调用栈被清空，当前宏任务从宏任务队列中移除），开始执行 <strong>微任务</strong>（按照微任务的入队顺序依次执行，直到将所有微任务执行完成，清空微任务队列）</li><li>如果在上面的步骤中有对页面进行变更的操作，就将 <strong>变更渲染</strong> 出来</li><li>此时一次事件循环结束，如果此时宏任务队列为空，那么将开始等待进行下一次事件循环，重复执行以上的流程</li></ol><p>JS 引擎在每个宏任务执行完成后，会立即执行微任务队列中的所有任务，然后再执行其他的宏任务，或渲染，或进行其他任何操作，当微任务队列没有清空之前，是不会开始执行宏任务的</p>',4),x=n("h2",{id:"事件循环的特点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件循环的特点","aria-hidden":"true"},"#"),s(" 事件循环的特点")],-1),L=n("h3",{id:"永不阻塞",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#永不阻塞","aria-hidden":"true"},"#"),s(" 永不阻塞")],-1),M=n("p",null,[s("JS的事件循环模型与许多其他语言不同的一个非常有趣的特性是，它 "),n("strong",null,"永不阻塞"),s("。处理I/O通常通过事件和回调来执行，所以当一个应用正等待一个IndexedDB查询返回或者一个XHR请求返回时，它仍然可以处理其他事情，比如用户输入")],-1);function J(T,N){const i=e("RouterLink"),c=e("Minfo"),p=e("Mermaid");return d(),r("div",null,[h,n("p",null,[s("同步任务是执行后很快就可以得到结果，同步任务在主线程上面执行，会形成一个"),a(i,{to:"/blog-js/11.html#%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87"},{default:t(()=>[s("执行栈")]),_:1}),s("，这些任务按照代码的顺序依次执行，前一个任务结束后，才会执行后一个任务")]),k,m,a(c,null,{default:t(()=>[g,f]),_:1}),v,a(c,null,{default:t(()=>[b]),_:1}),_,a(p,{id:"mermaid-115",code:"eJytU91q2zAYvddTCHLjQBTyW4YZudgT7KIv4MTObObGxVbJetdQsiZtmgQ6to5uNNlW2o0lC2MtxmbZy1h2/BaTrNlzAr0o9ErS+c45fN+RhBACWMO6IkLPOfHcO7L8Fgx/+Led4OYEsGpTN9oNVTIx3H4GgLVXf2FKuypcLQ6DNzf+pAdkzVQaWDNajABhwiC/z0j/1HNdcjyFtLDBgxAXBTIe+LMrz/0cTDrFLEdLgqXgbW1HMfbwP6i8RixlmR2FK8Jz09jRLCWPVaUVo9U1cplZKC0Z0AVvCaR7R+aHMYG1lgVRNWmbo+H5Jem925xNFQQyH6UZWWbfpvByvgFHrgCkUYT4+rRu1jz71LOd4KuDUM1zh7zg2TMyekuOHK7y+9er6QAhsnjNAXI8Id0rJk/ip/L/VwEALqJ8OHWIM+Jixg07R6S3SBrPoxouAVxaJzK0DHD5Xnk8ICNWAK7QYTbkVYT4gcwHfm9MxkM6CW+RTshL9Bhcu+H7L4DR0w6Uhbce5ECz3cSY/sD/0Oetsu7TftSGP8okMd/uRlcQTm/Dj5/I6Ny/+OXbP/3LM6blKs8+8L9P078jaif1SqIwV38u6N0kKUfJReVg1ifLbhKTyrKL2XGo97LbAKgozzcW3tcV+j9gU9N1MSPLcg5a2DReKmKmItWbT6QcP6K2JmNVLO2+yjUM3TDFTKFQiGuyZNHfbEr7IqzCamxaeVRT8BebVDAt"}),x,L,M])}const S=l(u,[["render",J],["__file","16.html.vue"]]);export{S as default};
