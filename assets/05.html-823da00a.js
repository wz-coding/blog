import{_ as r,r as o,o as c,c as d,e as a,f as e,b as n,w as i,d as s}from"./app-d3341b56.js";const h={},l=s('<h1 id="reactive-相关" tabindex="-1"><a class="header-anchor" href="#reactive-相关" aria-hidden="true">#</a> reactive 相关</h1><p><code>reactive</code> 函数是 Vue3 中用于创建响应式数据的方法之一，也是 Vue3 响应式系统的核心功能之一，下面我们将探究 <code>reactive</code> 函数的用法及实现原理。</p><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h2>',4),_=a("code",null,"reactive",-1);function u(f,v){const t=o("RouterLink");return c(),d("div",null,[l,a("p",null,[_,e(" 函数的实现原理是基于 Proxy 对象，通过 Proxy 对象可以拦截对对象的访问和修改操作，从而实现响应式数据。（响应式原理与 Proxy 在 "),n(t,{to:"/blog-vue/vue3/01.html"},{default:i(()=>[e("Vue3 响应系统")]),_:1}),e(" 这一章节有过介绍）")])])}const m=r(h,[["render",u],["__file","05.html.vue"]]);export{m as default};
