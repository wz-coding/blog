import{_ as t,r as o,o as c,c as p,b as l,w as i,d as a,e as n,f as s}from"./app-e321a476.js";const u={},d=a(`<h1 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h1><p><strong>变量的作用域</strong> 指的是变量在程序中可以被访问和使用的范围。在 JavaScript 或其他编程语言中，变量通常有全局作用域和局部作用域之分。全局变量可以在整个程序中被访问和使用，而局部变量只能在定义它的代码块或函数内部被访问和使用</p><h2 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h2><p><strong>全局变量</strong> 是在程序的整个生命周期内都可以访问的变量。它们通常在程序的顶部定义，并且可以在程序的任何位置使用。在网页中，全局变量是全局对象 <code>window</code> 的属性，可以通过 <code>window.xxx</code> 来设置和访问全局变量</p><p>全局变量的作用域是整个程序，这意味着它们可以在程序的任何函数或代码块中访问和修改。全局变量通常用于存储程序运行时需要共享的数据，例如配置信息或应用程序状态。然而，过度使用全局变量可能会导致代码难以维护和调试，因此建议谨慎使用全局变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//输出 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token comment">//输出 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),r=n("p",null,[s("在函数内部定义变量时，如果没有使用关键字来声明（"),n("code",null,"var"),s("、"),n("code",null,"let"),s("、"),n("code",null,"const"),s("），那么此时定义的变量就是全局变量，可以在全局环境中访问，因此定义变量时要特别注意")],-1),k=a(`<h2 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h2><p><strong>局部变量</strong> 是指在函数内部声明的变量。它们只能在函数内部访问。局部变量仅作用在局部区域中，从定义开始到大括号 <code>{}</code> 或者 <code>return</code> 结束。需要注意的是，在函数体内声明局部变量时，如果不使用 <code>var</code> 关键字，则将声明全局变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&quot;hello1&quot;</span><span class="token punctuation">;</span> <span class="token comment">//定义一个全局变量</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot;hello2&quot;</span><span class="token punctuation">;</span> <span class="token comment">//定义一个局部变量</span>
    str3 <span class="token operator">=</span> <span class="token string">&quot;hello3&quot;</span><span class="token punctuation">;</span> <span class="token comment">//定义一个全局变量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h2><p><strong>变量提升</strong> 是指在 JavaScript 中，变量和函数声明会在代码执行之前被移动到它们所在作用域的顶部。这意味着你可以在声明变量或函数之前使用它们。这种行为被称为“提升”，因为变量和函数声明好像被“提升”到了代码的顶部</p><p>需要注意的是，只有声明本身会被提升，而初始化赋值不会。在下面的例子中，变量 x 的值在第一行代码执行时仍然是 undefined，因为初始化赋值 x = 5 还没有执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 输出 undefined</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>函数声明也会被提升，这意味着你可以在声明函数之前调用它。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 输出 &quot;Hello, world!&quot;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function v(m,h){const e=o("Minfo");return c(),p("div",null,[d,l(e,null,{default:i(()=>[r]),_:1}),k])}const b=t(u,[["render",v],["__file","02.html.vue"]]);export{b as default};
