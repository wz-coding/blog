import{_ as c,r as s,o as i,c as p,b as e,w as l,d as r,e as a,f as n}from"./app-40c9110a.js";const d={},u=r(`<h1 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch" aria-hidden="true">#</a> Fetch</h1><p><code>fetch()</code> 方法是JavaScript中用于发起获取资源的请求的内置方法。它返回一个Promise，这个Promise会在请求响应后被resolve，并传回Response对象。这是一种现代的替代传统的XMLHttpRequest的方法，它更加方便且易于使用</p><h2 id="使用-fetch" tabindex="-1"><a class="header-anchor" href="#使用-fetch" aria-hidden="true">#</a> 使用 fetch()</h2><p><code>fetch()</code> 方法的基本用法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//或者</span>
<span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fetch()</code> 方法的参数有两个：</p><ul><li>url：要请求的URL</li><li>options：一个可选的配置对象，如果没有这个参数，那么 <code>fetch()</code> 方法会默认使用GET方法</li></ul><h2 id="options-配置" tabindex="-1"><a class="header-anchor" href="#options-配置" aria-hidden="true">#</a> options 配置</h2><p><code>fetch()</code> 方法的第二个参数是一个配置对象，它包含了一些可选的参数，用于控制请求的各个方面。这些参数包括：</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>method</td><td>字符串</td><td>请求使用的方法，如 GET、POST</td></tr><tr><td>headers</td><td>Headers对象或对象字面量</td><td>请求的头信息</td></tr><tr><td>body</td><td>Blob、BufferSource、FormData、URLSearchParams 或 USVString 对象</td><td>请求的body信息。注意GET或HEAD方法的请求不能包含body信息</td></tr><tr><td>mode</td><td>字符串</td><td>请求的模式，如 cors、no-cors 或者 same-origin</td></tr><tr><td>credentials</td><td>字符串</td><td>请求的credentials，如 omit、same-origin 或者 include</td></tr><tr><td>cache</td><td>字符串</td><td>请求的cache模式：default、no-store、reload、no-cache、force-cache 或者 only-if-cached</td></tr><tr><td>redirect</td><td>字符串</td><td>可用的redirect模式：follow (自动重定向), error (如果产生重定向将自动终止并且抛出一个错误），或者 manual (手动处理重定向)</td></tr><tr><td>referrer</td><td>USVString</td><td>一个USVString可以是 no-referrer、client 或一个 URL。默认是 client</td></tr><tr><td>referrerPolicy</td><td>字符串</td><td>指定了HTTP头部referer字段的值</td></tr><tr><td>integrity</td><td>字符串</td><td>包括请求的subresource integrity值</td></tr><tr><td>keepalive</td><td>布尔值</td><td>启用keepalive连接。默认是false</td></tr><tr><td>signal</td><td>AbortSignal</td><td>用于取消请求的AbortSignal对象</td></tr></tbody></table><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method" aria-hidden="true">#</a> method</h3><p><code>method</code> 参数用于指定请求的方法，可以是以下值之一：</p><ul><li>GET：默认方法，表示获取资源</li><li>POST：表示发送实体到服务器</li><li>PUT：表示替换服务器上的资源</li><li>DELETE：表示删除服务器上的资源</li><li>HEAD：表示获取资源的响应头</li><li>OPTIONS：表示获取信息，关于资源的哪些属性是客户端可以改变的</li><li>TRACE：表示回显服务器收到的请求，主要用于测试或诊断</li><li>CONNECT：表示建立一个到由目标服务器指定的网络端口的隧道</li></ul><h3 id="headers" tabindex="-1"><a class="header-anchor" href="#headers" aria-hidden="true">#</a> headers</h3><p><code>headers</code> 参数用于指定请求的头部信息，它是一个对象，其中的每个属性都是请求头部的一个属性</p><h3 id="body" tabindex="-1"><a class="header-anchor" href="#body" aria-hidden="true">#</a> body</h3><p><code>body</code> 参数用于指定请求的实体部分，它可以是一个字符串、Blob、BufferSource、FormData或URLSearchParams对象</p><h3 id="mode" tabindex="-1"><a class="header-anchor" href="#mode" aria-hidden="true">#</a> mode</h3><p><code>mode</code> 参数用于指定请求的模式，它可以是以下值之一：</p><ul><li>cors：跨源请求</li><li>no-cors：不进行跨源请求</li><li>same-origin：同源请求</li></ul><h3 id="credentials" tabindex="-1"><a class="header-anchor" href="#credentials" aria-hidden="true">#</a> credentials</h3><p><code>credentials</code> 参数用于指定请求的凭据（credentials）如何发送，它可以是以下值之一：</p><ul><li>include：发送凭据</li><li>same-origin：仅发送同源凭据</li><li>omit：不发送凭据</li></ul><h3 id="cache" tabindex="-1"><a class="header-anchor" href="#cache" aria-hidden="true">#</a> cache</h3><p><code>cache</code> 参数用于指定请求的缓存模式，它可以是以下值之一：</p><ul><li>default：默认缓存模式</li><li>no-store：不缓存请求</li><li>reload：每次都重新发送请求</li><li>no-cache：不缓存请求，但会检查缓存是否过期</li><li>force-cache：强制使用缓存</li><li>only-if-cached：只使用缓存，不发送请求</li></ul><h3 id="redirect" tabindex="-1"><a class="header-anchor" href="#redirect" aria-hidden="true">#</a> redirect</h3><p><code>redirect</code> 参数用于指定在发生重定向时如何处理，它可以是以下值之一：</p><ul><li>follow：自动重定向</li><li>error：如果发生重定向，则返回一个错误</li><li>manual：手动处理重定向</li></ul><h3 id="referrer" tabindex="-1"><a class="header-anchor" href="#referrer" aria-hidden="true">#</a> referrer</h3><p><code>referrer</code> 参数用于指定请求的referer字段的值，它可以是以下值之一：</p><ul><li>no-referrer：不发送referer字段</li><li>client：发送原始请求的URL</li><li>url：发送请求的URL</li></ul><h3 id="referrerpolicy" tabindex="-1"><a class="header-anchor" href="#referrerpolicy" aria-hidden="true">#</a> referrerPolicy</h3><p><code>referrerPolicy</code> 参数用于指定请求的referrerPolicy字段的值，它可以是以下值之一：</p><ul><li>no-referrer：不发送referrer字段</li><li>no-referrer-when-downgrade：如果从HTTPS请求降级为HTTP请求，则不发送referrer字段</li><li>origin：只发送在 Referer 中的域，而不是完整的页面 URL</li><li>origin-when-cross-origin：发送完整的 Referer 到相同的源，但对于跨源请求，只发送域部分</li><li>unsafe-url： 在 Referer 中始终发送完整的 url，即使是 HTTPS→HTTP 请求</li><li>strict-origin： 只发送域，对于 HTTPS→HTTP 请求，则不发送 Referer</li><li>strict-origin-when-cross-origin：对于同源情况下则发送完整的 Referer，对于跨源情况下，则只发送域，如果是 HTTPS→HTTP 请求，则什么都不发送</li><li>same-origin：发送完整的 Referer 到相同的源，但对于跨源请求，不发送 Referer</li></ul><h3 id="integrity" tabindex="-1"><a class="header-anchor" href="#integrity" aria-hidden="true">#</a> integrity</h3><p><code>integrity</code> 参数用于指定请求的integrity字段的值，它可以是以下值之一：</p><ul><li>sha256-hash：发送sha256-hash字段</li><li>sha384-hash：发送sha384-hash字段</li><li>sha512-hash：发送sha512-hash字段</li><li>sha1-hash：发送sha1-hash字段</li><li>md5-hash：发送md5-hash字段</li><li>md5：发送md5字段</li><li>sha256：发送sha256字段</li><li>sha384：发送sha384字段</li><li>sha512：发送sha512字段</li><li>sha1：发送sha1字段</li><li>none：不发送integrity字段</li></ul><h3 id="keepalive" tabindex="-1"><a class="header-anchor" href="#keepalive" aria-hidden="true">#</a> keepalive</h3><p><code>keepalive</code> 参数用于指定请求在网页关闭后是否继续发送，它可以是以下值之一：</p><ul><li>true：网页关闭后仍然发送请求（但是请求成功后的处理函数无法执行，因为文档 <code>Docuemnt</code> 已被卸载）</li><li>false：网页关闭后不发送请求</li></ul><h3 id="signal" tabindex="-1"><a class="header-anchor" href="#signal" aria-hidden="true">#</a> signal</h3><p><code>signal</code> 参数用于指定一个 <code>AbortSignal</code> 对象，用于取消请求。</p><h2 id="中止-fetch" tabindex="-1"><a class="header-anchor" href="#中止-fetch" aria-hidden="true">#</a> 中止 fetch()</h2><p><code>fetch()</code> 方法会返回一个Promise对象，而在 JS 中，并没有中止 Promise 的概念，如果我们想要中止 <code>fetch()</code> 请求，那应该怎么办呢？</p><h3 id="abortcontroller-对象" tabindex="-1"><a class="header-anchor" href="#abortcontroller-对象" aria-hidden="true">#</a> AbortController 对象</h3><p>为了实现中止 <code>fetch()</code> 请求的功能，JS提供了一个特殊的内置对象 <code>AbortController</code>，<code>AbortController</code> 对象不仅可以中止 fetch 请求，还可以中止其他需要使用 Promise 的异步操作。 <code>AbortController</code> 对象包含两个属性：<code>signal</code> 和 <code>abort()</code></p><ul><li><code>signal</code>：返回一个 <code>AbortSignal</code> 实例对象，该对象上有一个 <code>aborted</code> 布尔属性，表示请求是否被中止，还有 <code>abort()</code> 方法，该方法触发 <code>abort</code> 事件，并将 <code>aborted</code> 属性设置为 <code>true</code>，表示中止了请求</li><li><code>abort()</code>：触发 <code>abort</code> 事件，并将 <code>signal</code>属性返回的对象上的 <code>aborted</code> 属性设置为 <code>true</code></li></ul><h3 id="中止-fetch-请求" tabindex="-1"><a class="header-anchor" href="#中止-fetch-请求" aria-hidden="true">#</a> 中止 fetch() 请求</h3><p><code>fetch()</code> 方法能够很好的配合 <code>AbortController</code> 对象使用，在 <code>fetch()</code> 方法的配置选项中就有 <code>signal</code> 属性，它接受一个 <code>AbortSignal</code> 对象作为参数，<code>fetch()</code> 方法内部实现了对 <code>abort()</code> 事件的监听，我们可以通过 <code>AbortController</code> 对象来中止 <code>fetch()</code> 请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> signal <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;AbortError&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求已中止&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;请求出错:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中止请求</span>
controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中止-promise-异步操作" tabindex="-1"><a class="header-anchor" href="#中止-promise-异步操作" aria-hidden="true">#</a> 中止 Promise 异步操作</h3><p>我们可以在 Promise 内部监听 <code>abort</code> 事件，当 <code>abort</code> 事件触发时，我们可以直接使用 <code>reject</code> 来结束 Promise ，从而中止异步操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>

<span class="token comment">// 异步操作</span>
<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模拟异步操作</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;操作成功&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    signal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;abort&#39;</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 绑定 signal 对象</span>
promise
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
         console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;中止异步操作:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中止操作</span>
controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54),h=a("code",null,"AbortController",-1),k=a("code",null,"AbortSignal",-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/API/AbortController",target:"_blank",rel:"noopener noreferrer"};function f(b,v){const t=s("ExternalLinkIcon"),o=s("Minfo");return i(),p("div",null,[u,e(o,null,{default:l(()=>[a("p",null,[n("更多关于 "),h,n(" 和 "),k,n(" 的信息可以前往 "),a("a",m,[n("AbortController"),e(t)])])]),_:1})])}const y=c(d,[["render",f],["__file","03.html.vue"]]);export{y as default};
