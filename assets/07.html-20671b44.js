import{_ as n,o as s,c as a,d as t}from"./app-4cdf6ae8.js";const e={},p=t(`<h1 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h1><p>对象是一个抽象的概念，我们可以通过观察现实世界中某种事物的外貌及表现，总结归纳其行为特点，然后用对象的方式来定义和描述它，将现实的事物转化为计算机中的数据结构。通过这种方式，我们几乎可以描述现实世界的万事万物</p><p>在 JavaScript 中，对象（<code>Object</code>）是一种重要并且复杂的数据类型，它用于存储键值对和更复杂的实体</p><p>几乎所有的 JavaScript 对象都是 <code>Object</code> 的实例，它们从 <code>Object.prototype</code> 继承属性和方法，尽管这些属性和方法可能被覆盖或重写。<code>Object</code> 数据类型具有丰富的内置方法和属性，可以用来操作对象</p><h2 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象" aria-hidden="true">#</a> 创建对象</h2><p>在 JavaScript 中，有几种方法可以创建对象：</p><ol><li>对象字面量：这是最简单的创建对象的方法。你可以使用花括号 <code>{}</code> 来定义一个对象，然后在其中定义属性和方法。例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">,</span>
     <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// do something</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>Object</code> 构造函数：你可以使用 <code>new Object()</code> 来创建一个新的对象实例，然后再为其添加属性和方法。例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span>property1 <span class="token operator">=</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span>property2 <span class="token operator">=</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span><span class="token function-variable function">method1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// do something</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>构造函数：你可以定义一个构造函数，然后使用 <code>new</code> 关键字来创建一个新的对象实例。构造函数通常用来创建具有相同属性和方法的多个对象。例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token parameter">property1<span class="token punctuation">,</span> property2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>property1 <span class="token operator">=</span> property1<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>property2 <span class="token operator">=</span> property2<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">method1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// do something</span>
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">let</span> myObject1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">let</span> myObject2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token string">&#39;value3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="添加属性和方法" tabindex="-1"><a class="header-anchor" href="#添加属性和方法" aria-hidden="true">#</a> 添加属性和方法</h2><p>我们可以通过对象来描述某种真实事物，而要想将之准确描述，为对象添加属性和方法是必不可少的，可以通过为对象分配一个值来向对象添加新属性，就像定义变量一样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span>newProperty <span class="token operator">=</span> <span class="token string">&#39;这是一个新属性&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>newProperty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 这是一个新属性</span>

<span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">[</span><span class="token string">&#39;newProperty&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;这是一个新属性&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">[</span><span class="token string">&#39;newProperty&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 这是一个新属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，也可以通过将函数分配给对象的属性来向对象添加方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">myMethod</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is a method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: This is a method</span>

<span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is a method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: This is a method</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象常用方法" tabindex="-1"><a class="header-anchor" href="#对象常用方法" aria-hidden="true">#</a> 对象常用方法</h2><h2 id="其他常用的对象" tabindex="-1"><a class="header-anchor" href="#其他常用的对象" aria-hidden="true">#</a> 其他常用的对象</h2>`,14),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","07.html.vue"]]);export{r as default};
