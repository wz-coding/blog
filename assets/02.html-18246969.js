import{_ as p,r as n,o as c,c as i,b as a,w as l,d as u,e as s,f as t}from"./app-c3f30fd8.js";const d={},r=u(`<h1 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> AJAX</h1><p>AJAX并非编程语言，而是一种使用现有技术集合的方法。这些技术包括 <code>HTML</code> 或 <code>XHTML</code>, <code>CSS</code>, <code>JavaScript</code>, <code>DOM</code>, <code>XML</code>, <code>XSLT</code>, 以及最重要的<code>XMLHttpRequest</code>。AJAX的全称为 <code>Asynchronous JavaScript And XML</code>，意为异步JavaScript和XML</p><h2 id="ajax是如何工作的" tabindex="-1"><a class="header-anchor" href="#ajax是如何工作的" aria-hidden="true">#</a> AJAX是如何工作的</h2><p>AJAX的工作方式是在后台与服务器进行少量数据交换，这使得网页可以在不重新加载整个网页的情况下，对网页的某部分进行更新。这种技术在浏览器运行，使用浏览器与web服务器之间的异步数据传输，使网页从服务器请求少量的信息，而不是整张页面</p><h2 id="xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest" aria-hidden="true">#</a> XMLHttpRequest</h2><p><code>XMLHttpRequest</code>是AJAX的基础，也是最核心的部分，它是一个内置对象，允许我们使用 JavaScript 发送 <code>HTTP</code> 请求,虽然它的名字里面有 <code>XML</code> 一词，但它可以操作任何数据，而不仅仅是 <code>XML</code> 格式。我们可以用它来上传/下载文件，跟踪请求进度等</p><h3 id="创建-xhr-对象" tabindex="-1"><a class="header-anchor" href="#创建-xhr-对象" aria-hidden="true">#</a> 创建 XHR 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="初始化请求" tabindex="-1"><a class="header-anchor" href="#初始化请求" aria-hidden="true">#</a> 初始化请求</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>async<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>open</code> 方法有三个参数：</p><ul><li>method：请求的类型；包含 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等</li><li>URL：一个 <code>url</code> 字符串，表示请求的地址</li><li>async：一个可选的布尔参数，表示是否异步执行操作，默认为 <code>true</code>。如果值为 <code>false</code>，<code>send()</code> 方法直到收到答复前不会返回</li><li>user、password：可选的用户名和密码，用于身份验证用途，默认为 <code>null</code></li></ul><h3 id="设置请求头" tabindex="-1"><a class="header-anchor" href="#设置请求头" aria-hidden="true">#</a> 设置请求头</h3><p>XMLHttpRequest 允许发送自定义 <code>header</code>，并且可以从响应中读取 <code>header</code>，<code>header</code> 必须在 <code>open()</code> 之后 <code>send()</code> 之前设置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//xhr.setRequestHeader(header, value);</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>setRequestHeader</code> 方法用于设置请求头，它有两个参数：</p><ul><li>header：请求头的名称</li><li>value：请求头的值</li></ul><p>header 会以单行的形式返回，header 之间的换行符为 <code>\\r\\n</code>，并且 header 的 <code>name</code> 与 <code>value</code> 之间总是用以冒号后跟一个空格 <code>: </code> 来分隔，获取header的方法有两种：</p><ul><li><code>xhr.getResponseHeader(name)</code>：获取给定名称的响应头</li><li><code>xhr.getAllResponseHeaders()</code>：获取所有响应头</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>Cache-Control<span class="token operator">:</span> max-age=<span class="token number">31536000</span>
Content-Length<span class="token operator">:</span> <span class="token number">2480</span>
Content-Type<span class="token operator">:</span> application/json
Date<span class="token operator">:</span> Sat<span class="token punctuation">,</span> <span class="token number">09</span> Sep <span class="token number">2023</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">16</span> GMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当想要将获取到的 header 处理成为可用的对象，需要额外使用一些JS方法来处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> headers <span class="token operator">=</span> xhr
  <span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\r\\n&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以获得一个标准的 header 对象了</p><h3 id="设置请求超时" tabindex="-1"><a class="header-anchor" href="#设置请求超时" aria-hidden="true">#</a> 设置请求超时</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>超时设置会在请求耗时超过给定的超时事件后，自动终止请求，并将 <code>readyState</code> 属性设置为 4，同时触发 <code>timeout</code> 事件</p><h3 id="设置响应类型" tabindex="-1"><a class="header-anchor" href="#设置响应类型" aria-hidden="true">#</a> 设置响应类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>responseType</code> 属性用于设置响应的数据类型，它接受以下值：</p><ul><li><code>&#39;&#39;</code>：空字符串，默认值，代表响应的数据类型为 <code>text</code></li><li><code>&#39;text&#39;</code>：代表响应的数据类型为 <code>text</code></li><li><code>&#39;arraybuffer&#39;</code>：代表响应的数据类型为 <code>ArrayBuffer</code></li><li><code>&#39;blob&#39;</code>：代表响应的数据类型为 <code>Blob</code></li><li><code>&#39;document&#39;</code>：代表响应的数据类型为 <code>Document</code></li><li><code>&#39;json&#39;</code>：代表响应的数据类型为 <code>JSON</code></li><li><code>&#39;text&#39;</code>：代表响应的数据类型为 <code>text</code></li></ul><h3 id="发送请求" tabindex="-1"><a class="header-anchor" href="#发送请求" aria-hidden="true">#</a> 发送请求</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>send</code> 方法有一个可选的参数 <code>[body]</code>，它的默认值是 <code>null</code>,它还可以取以下的值：</p><ul><li>可以为 Document, 在这种情况下，它在发送之前被序列化</li><li>可以为 XMLHttpRequestBodyInit, Blob,BufferSource, FormData, URLSearchParams, 或者 USVString 对象</li></ul><h3 id="xhr-请求状态" tabindex="-1"><a class="header-anchor" href="#xhr-请求状态" aria-hidden="true">#</a> XHR 请求状态</h3><p><code>XMLHttpRequest.status</code> 代表了 xhr 请求的状态。<code>status</code> 的值是一个无符号的数字类型。在请求完成前，status 的值为 0。如果请求出错，浏览器返回的 status 也为 0。status 码是标准的 HTTP status code</p><p>常见的 <code>HTTP status code</code> 请看文章最后</p><h3 id="xhr-事件监听" tabindex="-1"><a class="header-anchor" href="#xhr-事件监听" aria-hidden="true">#</a> XHR 事件监听</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//监听 XHR 加载事件</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>xhr<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//监听 XHR 错误事件</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Request failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//监听 XHR 加载进度事件</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">// event.loaded —— 已经下载了多少字节</span>
<span class="token comment">// event.lengthComputable = true，当服务器发送了 Content-Length header 时</span>
<span class="token comment">// event.total —— 总字节数（如果 lengthComputable 为 true）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>loaded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 xhr 对象上，上面示例中的3个事件是最常用的：</p><ul><li><code>load</code> 事件：请求成功完成时触发</li><li><code>error</code> 事件：请求失败时触发，例如网络中断或者无效的 URL</li><li><code>progress</code> 事件：请求接收到更多数据时触发，可以获取到请求进度</li></ul><h3 id="xhr-状态监听" tabindex="-1"><a class="header-anchor" href="#xhr-状态监听" aria-hidden="true">#</a> XHR 状态监听</h3><p>xhr 对象的状态会随着它的处理进度的变化而变化，xhr 对象提供了 <code>readyState</code> 属性，用来表示它的请求状态，它有5个可能的值：</p><ul><li>0：请求未初始化（UNSENT）</li><li>1：服务器连接已建立（OPENED）</li><li>2：请求已接收（HEADER_RECEIVED）</li><li>3：请求处理中（LOADING）</li><li>4：请求已完成，且响应已就绪（DONE）</li></ul><p>当 <code>readyState</code> 属性的值发生变化时，会触发 <code>readystatechange</code> 事件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>xhr<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跟踪上传进度" tabindex="-1"><a class="header-anchor" href="#跟踪上传进度" aria-hidden="true">#</a> 跟踪上传进度</h3><p>在上面的示例中，我们介绍了 <code>onprogress</code> 事件，它用来监听请求（下载）的进度，但是有时我们在上传文件时，也会想要监听上传的进度，这时可以使用 <code>xhr.upload</code> 对象来进行监听</p><p><code>xhr.upload</code> 对象有以下事件，会在不同的上传阶段触发：</p><ul><li><code>loadstart</code>：上传开始时触发</li><li><code>progress</code>：上传过程中不断触发</li><li><code>abort</code>：上传被中断时触发</li><li><code>error</code>：上传失败时触发</li><li><code>load</code>：上传成功完成时触发</li><li><code>loadend</code>：上传完成时触发</li><li><code>timeout</code>：上传超时触发（如果设置了 timeout 属性）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 监听上传进度</span>
xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>loaded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 监听上传完成</span>
xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Upload finished successfully.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 监听上传失败</span>
xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error during the upload: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>xhr<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 监听上传中断</span>
xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function-variable function">onabort</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The upload has been aborted</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="终止-xhr-请求" tabindex="-1"><a class="header-anchor" href="#终止-xhr-请求" aria-hidden="true">#</a> 终止 XHR 请求</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>abort</code> 方法会终止请求，并将 xhr 的 <code>readyState</code> 属性与 <code>status</code> 重置为 0</p><h2 id="常见状态码" tabindex="-1"><a class="header-anchor" href="#常见状态码" aria-hidden="true">#</a> 常见状态码</h2><table><thead><tr><th>状态</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>100</td><td>信息响应</td><td>Continue（继续）。客户端应继续其请求</td></tr><tr><td>101</td><td>信息响应</td><td>Switching Protocols（切换协议）。服务器根据客户端的请求切换协议</td></tr><tr><td>200</td><td>成功响应</td><td>OK。请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>成功响应</td><td>Created。成功请求并创建了新的资源</td></tr><tr><td>204</td><td>成功响应</td><td>No Content。服务器成功处理，但未返回内容</td></tr><tr><td>301</td><td>重定向</td><td>Moved Permanently。请求的资源已被永久的移动到新URI</td></tr><tr><td>302</td><td>重定向</td><td>Found。此响应代码表示所请求资源的URI已暂时更改</td></tr><tr><td>400</td><td>客户端错误</td><td>Bad Request。客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>客户端错误</td><td>Unauthorized。请求要求用户的身份认证</td></tr><tr><td>403</td><td>客户端错误</td><td>Forbidden。服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>客户端错误</td><td>Not Found。服务器无法根据客户端的请求找到资源（网页等）</td></tr><tr><td>500</td><td>服务器错误</td><td>Internal Server Error。服务器内部错误，无法完成请求</td></tr><tr><td>502</td><td>服务器错误</td><td>Bad Gateway。作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>服务器错误</td><td>Service Unavailable。由于超载或系统维护，服务器暂时的无法处理客户端的请求</td></tr></tbody></table>`,56),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/XMLHttpRequest",target:"_blank",rel:"noopener noreferrer"};function v(h,m){const e=n("ExternalLinkIcon"),o=n("Minfo");return c(),i("div",null,[r,a(o,null,{default:l(()=>[s("p",null,[t("更多关于 AJAX 的信息，请参考 "),s("a",k,[t("XMLHTTPRequest"),a(e)])])]),_:1})])}const g=p(d,[["render",v],["__file","02.html.vue"]]);export{g as default};
