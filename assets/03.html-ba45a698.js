import{_ as p,r as s,o as l,c,b as n,w as i,d as r,e as a,f as e}from"./app-0ece7e13.js";const d={},u=r(`<h1 id="loader" tabindex="-1"><a class="header-anchor" href="#loader" aria-hidden="true">#</a> Loader</h1><p>loader 是 webpack 的核心功能之一，它可以对源文件进行解析转换，使之转变成为 webpack 可以使用的模块，从而增强 webpack 的文件处理能力。</p><h2 id="使用-loader" tabindex="-1"><a class="header-anchor" href="#使用-loader" aria-hidden="true">#</a> 使用 loader</h2><p>有两种方式可以使用 loader，以解析 <code>.scss</code> 文件为例，它的 loader 使用方式如下：</p><ol><li>配置文件：在 <code>webpack.config.js</code> 中配置好要使用的 loader。loader 的配置包括两个属性：<code>test</code> 和 <code>use</code>，它们分别表示匹配文件的规则（test）与使用哪种 loader 来解析匹配的文件（use）。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>
         <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    <span class="token comment">//匹配以 .scss 结尾的文件</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span>
               <span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span>  <span class="token comment">//最后使用 style-loader 进行样式处理</span>
               <span class="token punctuation">{</span>
                  <span class="token literal-property property">loader</span><span class="token operator">:</span><span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>  <span class="token comment">//当 scss-loader 对文件处理完成后，再使用 css-loader 进行处理</span>
                  <span class="token literal-property property">options</span><span class="token operator">:</span><span class="token punctuation">{</span>
                     <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">//使用 css-loader 时添加部分配置</span>
                  <span class="token punctuation">}</span>
               <span class="token punctuation">}</span><span class="token punctuation">,</span>
               <span class="token string">&quot;scss-loader&quot;</span>   <span class="token comment">//使用 scss-loader 对 .scss 文件进行解析处理</span>
            <span class="token punctuation">]</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>由上面的配置示例可以看出，loader 的调用顺序是从后往前调用的。</p><ol start="2"><li>内联方式：在 <code>import</code> 导入语句中显示指定 loader。在导入语句中使用 <code>!</code> 分隔不同的 loader，使用 <code>?</code> 携带参数对 loader 进行配置。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//一般使用方式</span>
<span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&#39;style-loader!css-loader?modules!./styles.css&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//使用 ! 前缀，禁用所有已经配置的普通 loader</span>
<span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&#39;!style-loader!css-loader?modules!./styles.css&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//使用 !! 前缀，禁用所有已经配置的 loader</span>
<span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&#39;!!style-loader!css-loader?modules!./styles.css&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//使用 -! 前缀，禁用所有已经配置的 preLoader 和 loader，不禁用 postLoaders</span>
<span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&#39;-!style-loader!css-loader?modules!./styles.css&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="编写-loader" tabindex="-1"><a class="header-anchor" href="#编写-loader" aria-hidden="true">#</a> 编写 loader</h2><p>在简单了解了 loader 的使用方式后，我们知道了 loader 是 webpack 用来对源文件进行解析转换的，所以 loader 的功能应尽量保持专注在对文件的解析处理上。下面我们将探究如何编写一个 loader，从而加深对 loader 的理解。</p><h3 id="loader-功能" tabindex="-1"><a class="header-anchor" href="#loader-功能" aria-hidden="true">#</a> loader 功能</h3><p>loader 的功能应该尽量保持单一，即一个 loader 只完成一种解析转换，如果源文件需要经过多次解析转换，那么就应当使用多个 loader 进行链式调用去执行解析的任务。第一个 loader 会获得源文件的内容进行解析处理并将结果传递出去，之后的 loader 会得到上一个 loader 的处理结果并解析传递，如此按照顺序执行下去直到最后一个 loader。</p><h3 id="loader-实现" tabindex="-1"><a class="header-anchor" href="#loader-实现" aria-hidden="true">#</a> loader 实现</h3><p>loader 本质上是一个 Node.js 模块，这个模块应当导出一个方法，该方法的功能是获取处理前的内容，在内部处理完成后再将处理后的内容返回出去。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// source 是 compiler 传递给 loader 的一个文件的原内容</span>
  <span class="token comment">// ...一些处理过程</span>
  <span class="token comment">// 返回处理后的内容</span>
  <span class="token keyword">return</span> source<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在编写 loader 时还可以调用 webpack 提供的 API 或者引入其他模块以增强 loader 的解析能力。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> getOptions <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;loader-utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;node-sass&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取到用户给当前 Loader 传入的 options</span>
  <span class="token comment">// this 是 webpack 传递给 loader 的上下文对象，其中包含了 webpack 提供的 API</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...一些处理过程</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">sass</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>
     <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 当无法转换原内容时，可以给 webpack 返回一个 Error</span>
     content<span class="token punctuation">,</span> <span class="token comment">// 转换后的内容</span>
     sourceMap<span class="token punctuation">,</span> <span class="token comment">// 用于把转换后的内容得出原内容的 Source Map，方便调试</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),k={href:"https://webpack.docschina.org/concepts/loaders/",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const o=s("ExternalLinkIcon"),t=s("Minfo");return l(),c("div",null,[u,n(t,null,{default:i(()=>[a("p",null,[e("更多关于 webpack loader 的信息请查看："),a("a",k,[e("webpack loader"),n(o)])])]),_:1})])}const y=p(d,[["render",m],["__file","03.html.vue"]]);export{y as default};
