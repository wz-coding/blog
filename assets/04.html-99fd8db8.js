import{_ as l,r as p,o as u,c as r,b as a,w as t,d as o,e as s,f as n}from"./app-0ece7e13.js";const k={},d=o(`<h1 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> Plugin</h1><p>plugin 是 webpack 的另一项核心功能之一，它可以扩展增强 webpack 的功能以使其更加灵活强大，从而可以适应不同的应用场景。</p><h2 id="使用-plugin" tabindex="-1"><a class="header-anchor" href="#使用-plugin" aria-hidden="true">#</a> 使用 plugin</h2><p>有两种方式来使用 plugin，以 <code>HtmlWebpackPlugin</code> 为例，它的使用方式如下：</p><ol><li>配置文件：在 <code>webpack.config.js</code> 中配置好要使用的 plugin。即初始化 plugin 实例并传入相应的参数以供 webpack 在打包过程中调用。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token comment">// ... 其他配置省略</span>
   <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Node API 调用：直接访问 webpack 运行时并通过运行时调用 plugin。即获取打包时的 compiler 对象，通过 compiler 对象运行插件方法。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问 webpack 运行时(runtime)</span>
<span class="token keyword">const</span> configuration <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.config.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取 compiler 对象</span>

<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>

compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// ... 处理过程省略</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="编写-plugin" tabindex="-1"><a class="header-anchor" href="#编写-plugin" aria-hidden="true">#</a> 编写 plugin</h2><p>在简单了解了 plugin 的使用方式后，我们将探究如何编写一个 plugin，从而加深对 plugin 的理解。</p><h3 id="compiler" tabindex="-1"><a class="header-anchor" href="#compiler" aria-hidden="true">#</a> compiler</h3><p>compiler 对象是 webpack 在首次启动编译时传递给插件的参数，它是编写插件最常使用的参数之一，它包含了 webpack 打包配置的所有信息（options、loaders、plugins等），compiler 对象是全局唯一的，可以把它看作是 webpack 的实例。</p><h3 id="compilation" tabindex="-1"><a class="header-anchor" href="#compilation" aria-hidden="true">#</a> compilation</h3><p>compilation 对象是 webpack 在重新编译时传递给插件的参数，它也是编写插件最常使用的参数之一，它包含了当前的模块资源、编译生成的资源、发生变化的文件等。在开发模式下，每当 webpack 监听到文件发生变化后，就会重新创建 compilation 对象并重新编译文件。</p><p>compiler 与 compilation 的区别在于：compiler 代表了 webpack 从启动打包到退出的完整生命周期，compilation 则表示在 webpack 的生命周期中一次新的编译。</p><h3 id="监听事件" tabindex="-1"><a class="header-anchor" href="#监听事件" aria-hidden="true">#</a> 监听事件</h3><p>webpack 会在打包编译的过程中广播出许多事件，插件可以通过监听这些事件从而加入到 webpack 的打包流程中并完成相应的工作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//hooksName 可以替换为你想要监听的生命周期钩子函数</span>
<span class="token comment">//tabAsync 用来注册插件事件，也可以替换成 tapPromise（需要返回一个 promise）</span>

compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span><span class="token string">&quot;hooksName&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;tapAsync&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&quot;myPlugin&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//...一些处理逻辑</span>
   <span class="token comment">//在执行完处理逻辑后，需要执行 callback 方法通知 webpack 继续向后执行，否则打包流程会卡在这里</span>
   <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),m={href:"https://webpack.docschina.org/api/compiler-hooks/",target:"_blank",rel:"noopener noreferrer"},v=o(`<h3 id="plugin-实现" tabindex="-1"><a class="header-anchor" href="#plugin-实现" aria-hidden="true">#</a> plugin 实现</h3><p>plugin 的本质是一个有 <code>apply()</code> 方法的对象，<code>apply()</code> 方法会接收 compiler 对象作为参数。下面我们将使用上面介绍的知识来实现一个简单的 webpack 插件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">myPlugin</span><span class="token punctuation">{</span>
   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

   <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tabAsync</span><span class="token punctuation">(</span><span class="token string">&quot;myPlugin&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">coompilation<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是一个示例插件！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;资源的单次构建对象：&#39;</span><span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 处理构建过程，例如添加模块</span>
            <span class="token comment">// 可以从 compilation 对象上获取到 webpack 当前构建过程的所有资源</span>
            compilation<span class="token punctuation">.</span><span class="token function">addModule</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 调用 Webpack 提供的回调以继续向后执行</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b={href:"https://webpack.docschina.org/api/compilation-object/",target:"_blank",rel:"noopener noreferrer"};function g(h,f){const i=p("RouterLink"),e=p("ExternalLinkIcon"),c=p("Minfo");return u(),r("div",null,[d,a(c,null,{default:t(()=>[s("p",null,[n("webpack 在打包过程中的事件可以参考 "),a(i,{to:"/blog-complex/package/webpack/02.html#%E7%BB%86%E8%8A%82"},{default:t(()=>[n("打包过程")]),_:1}),n(" 这一章节，更加详细的事件请参考 "),s("a",m,[n("compiler 钩子"),a(e)])])]),_:1}),v,a(c,null,{default:t(()=>[s("p",null,[n("更多 compilation 对象的详细请参考 "),s("a",b,[n("compilation Object"),a(e)])])]),_:1})])}const _=l(k,[["render",g],["__file","04.html.vue"]]);export{_ as default};
