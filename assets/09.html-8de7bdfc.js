import{_ as t,r as e,o,c as l,b as r,w as c,d as a,e as n,f as s}from"./app-d364b918.js";const i={},u=a(`<h1 id="diff-算法" tabindex="-1"><a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a> Diff 算法</h1><p>diff 算法是 Vue 渲染器的核心算法，它的目的是当页面或者组件将要更新时，比较新旧两组 vnode（虚拟dom）节点，并以最小的性能开销完成更新操作（能够复用的节点尽量复用，没办法复用的节点再进行 dom 操作）</p><p>假设现在有一组 vnode 需要更新：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//旧的 vnode</span>
<span class="token keyword">const</span> oldVnode <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">&#39;1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">&#39;2&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">&#39;3&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">&#39;4&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">//新的 vnode</span>
<span class="token keyword">const</span> newVnode <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">&#39;1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">&#39;4&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">&#39;3&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">&#39;2&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不使用 diff 算法直接对新旧 vnode 进行更新操作，那么就要先卸载旧的 3 个子节点，在挂载新的 3 个子节点，一共要执行 6 次操作，这样移除在创建 dom 元素的操作会造成极大的性能开销。下面将探究使用 diff 算法是如何减小操作 dom 的性能开销的。</p>`,5),d=n("p",null,[s("这里在更新节点时没有提到使用 "),n("code",null,"innerHTML"),s(" 接口是因为这样做会存在一些问题：")],-1),k=n("ul",null,[n("li",null,[n("code",null,"innerHTML"),s(" 会将容器内所有节点全部清空，但容器的内容可能是由许多其他组件渲染的，这样做不能正确的执行这些组件的 "),n("code",null,"beforeUnmount"),s("、"),n("code",null,"unmounted"),s(" 等生命周期函数。")]),n("li",null,"容器当中的元素可能存在自定义指令，直接清空就不能触发对应的指令钩子函数。"),n("li",null,[n("code",null,"innerHTML"),s(" 清空元素时不会移除元素上绑定的事件处理函数。")])],-1),v=a('<h2 id="简单-diff" tabindex="-1"><a class="header-anchor" href="#简单-diff" aria-hidden="true">#</a> 简单 diff</h2><h2 id="双端-diff" tabindex="-1"><a class="header-anchor" href="#双端-diff" aria-hidden="true">#</a> 双端 diff</h2><h2 id="快速-diff" tabindex="-1"><a class="header-anchor" href="#快速-diff" aria-hidden="true">#</a> 快速 diff</h2>',3);function y(f,h){const p=e("Minfo");return o(),l("div",null,[u,r(p,null,{default:c(()=>[d,k]),_:1}),v])}const b=t(i,[["render",y],["__file","09.html.vue"]]);export{b as default};
