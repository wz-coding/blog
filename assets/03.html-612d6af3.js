import{_ as c,r as o,o as r,c as l,b as a,w as p,d as t,e as n,f as e}from"./app-7a50bd5e.js";const u="/blog/assets/image/grid.png",g={},m=t('<h1 id="网格布局" tabindex="-1"><a class="header-anchor" href="#网格布局" aria-hidden="true">#</a> 网格布局</h1><p>网格布局（<code>grid layout</code>）是 CSS 中的一种常用的布局方式，它与上一节中介绍的 <code>flex</code> 布局在布局方式上有一定的相似之处，但 <code>grid</code> 布局可以让我们更灵活地控制元素在页面中的位置和排列方式。本节将介绍 <code>grid</code> 布局的基本概念和用法。</p><h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h2><p>在学习网格布局之前，需要先了解一些关于网格布局的基础概念。</p><h3 id="网格" tabindex="-1"><a class="header-anchor" href="#网格" aria-hidden="true">#</a> 网格</h3><p>我们先从一张简单的图片开始，这张图片展示了网格布局的基本概念。</p><figure><img src="'+u+'" alt="grid" tabindex="0" loading="lazy"><figcaption>grid 网格</figcaption></figure><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>下表中会对上图的一些基础概念做出解释</p><table><thead><tr><th>概念</th><th>描述</th></tr></thead><tbody><tr><td>网格容器（<code>grid container</code>）</td><td>使用网格布局的容器，要使用网格布局，必须首先将一个元素设置为网格容器。使用 <code>display</code> 属性将一个元素设置为网格容器，并指定 <code>grid</code> 值（上图中<strong>浅蓝色</strong>部分）</td></tr><tr><td>网格线（<code>grid line</code>）</td><td>划分网格的线，水平网格线划分网格的行，从容器的最顶部开始。垂直网格线划分网格的列，从容器的最左侧开始 （上图中<strong>虚线</strong>）</td></tr><tr><td>网格单元格（<code>grid cell</code>）</td><td>由网格线划分出的区域，称为网格单元格，是网格布局中的最小单位 （上图中<strong>深蓝色</strong>的部分）</td></tr><tr><td>网格轨道（<code>grid track</code>）</td><td>网格上任意两条相邻网格线之间的空间 （上图中<strong>黄色</strong>直线之间的部分）</td></tr><tr><td>网格区域（<code>grid area</code>）</td><td>占据一个或多个网格单元格空间的一块区域，称为网格区域，网格区域必须是矩形的 （上图中<strong>半透明红色</strong>的部分）</td></tr><tr><td>网格间距（<code>gap</code>）</td><td>相邻网格之间的空间间隔，称为网格间距，有列间距 <code>column-gap</code> 和行间距 <code>row-gap</code> （上图中<strong>橙色</strong>双向箭头所指的空间间隔部分）</td></tr></tbody></table><h2 id="常用属性" tabindex="-1"><a class="header-anchor" href="#常用属性" aria-hidden="true">#</a> 常用属性</h2><p>下面会介绍一些 <code>grid</code> 布局中常用的属性，这些属性可以用来设置网格布局中的各种样式。</p><h3 id="常用属性值" tabindex="-1"><a class="header-anchor" href="#常用属性值" aria-hidden="true">#</a> 常用属性值</h3><p>在开始学习这些属性之前，有必要先了网格布局中一些特殊的属性值的计算方式。</p><table><thead><tr><th>关键字/方法</th><th>描述</th></tr></thead><tbody><tr><td>fr</td><td>表示分段（fraction），会按照比例分配网格容器中剩余的可用空间</td></tr><tr><td>auto</td><td>表示由浏览器自动计算网格轨道尺寸</td></tr><tr><td>minmax()</td><td>在给定的区间（闭区间）进行取值，表示在某个范围区间的长度或宽度，接收2个参数，第一个参数表示最小值，第二个参数表示最大值</td></tr><tr><td>repeat()</td><td>重复设置网格轨道大小的方法，接收2个参数，第一个参数表示重复次数（或使用关键字），第二个参数表示重复的形式（可以是具体的大小，也可以是某种模式）</td></tr><tr><td>auot-fill</td><td><code>repeat()</code>方法关键字，表示自动填充，会尽可能最大的将具有一定大小的单元格填充满网格容器（单元格不会溢出）</td></tr><tr><td>auot-fit</td><td><code>repeat()</code>方法关键字，表示自动适应填充，与 <code>auto-fill</code>表现相似，不过会将重复的空的网格轨道折叠</td></tr></tbody></table><h3 id="grid-template-columns" tabindex="-1"><a class="header-anchor" href="#grid-template-columns" aria-hidden="true">#</a> grid-template-columns</h3><p><code>grid-template-columns</code> 在网格列的维度上，去定义网格线的名称和网格列轨道的尺寸大小。在该属性上设置了多少个尺寸，就会在网格容器中产生对应数量的网格列轨道（列数）</p>',17),h=n("h3",{id:"grid-template-rows",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grid-template-rows","aria-hidden":"true"},"#"),e(" grid-template-rows")],-1),k=n("p",null,[n("code",null,"grid-template-rows"),e(" 在网格行的维度上，去定义网格线的名称和网格行轨道的尺寸大小。在该属性上设置了多少个尺寸，就会在网格容器中产生对应数量的网格行轨道（行数）")],-1),v=t(`<h3 id="grid-template-areas" tabindex="-1"><a class="header-anchor" href="#grid-template-areas" aria-hidden="true">#</a> grid-template-areas</h3><p><code>grid-template-areas</code> 用于定义网格区域，使用给定的字符形成一组字符串以对网格区域命名，字符之间以空格分隔，网格容器会按照字符的组合形式来划分区域。 在容器的子元素上设置 <code>grid-area</code> 属性，指定在 <code>grid-template-areas</code> 中使用过的命名字符，即可使子元素占据对应的网格区域 。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px 100px 100px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 100px 100px 100px<span class="token punctuation">;</span>
  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> 
    <span class="token string">&quot;header header header&quot;</span>
    <span class="token string">&quot;aside main main&quot;</span>
    <span class="token string">&quot;aside footer footer&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item-1</span> <span class="token punctuation">{</span> <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token selector">.item-2</span> <span class="token punctuation">{</span> <span class="token property">grid-area</span><span class="token punctuation">:</span> aside<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token selector">.item-3</span> <span class="token punctuation">{</span> <span class="token property">grid-area</span><span class="token punctuation">:</span> main<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token selector">.item-4</span> <span class="token punctuation">{</span> <span class="token property">grid-area</span><span class="token punctuation">:</span> footer<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b=t(`<p>如果不想使用某个区域，可以在命名字符串中使用 <code>.</code> 来表示该位置没有使用网格区域。</p><h3 id="grid-template" tabindex="-1"><a class="header-anchor" href="#grid-template" aria-hidden="true">#</a> grid-template</h3><p><code>grid-template</code> 属性是 <code>grid-template-columns</code>、<code>grid-template-rows</code> 和 <code>grid-template-areas</code> 属性的合并简写形式，它的格式如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token comment">/* grid-template: &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;; */</span>
  <span class="token property">grid-template</span><span class="token punctuation">:</span>80px 120px 120px / 1fr 1fr 1fr<span class="token punctuation">;</span>
  <span class="token comment">/* 可选 */</span>
  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> &lt;grid-template-areas&gt;<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token comment">/* grid-template: &lt;grid-template-areas&gt;  &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;; */</span>
  <span class="token property">grid-template</span><span class="token punctuation">:</span><span class="token string">&quot;a a b&quot;</span> 80px <span class="token string">&quot;a a b&quot;</span> 120px <span class="token string">&quot;c c c&quot;</span> 120px / 1fr 1fr 1fr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="grid-auto-columns" tabindex="-1"><a class="header-anchor" href="#grid-auto-columns" aria-hidden="true">#</a> grid-auto-columns</h3><p><code>grid-auto-columns</code> 属性用于指定自动创建的网格列轨道的宽度。</p>`,6),f=n("h3",{id:"grid-auto-rows",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grid-auto-rows","aria-hidden":"true"},"#"),e(" grid-auto-rows")],-1),_=n("p",null,[n("code",null,"grid-auto-rows"),e(" 属性用于指定自动创建的网格行轨道的高度。")],-1),x=t('<h3 id="grid-auto-flow" tabindex="-1"><a class="header-anchor" href="#grid-auto-flow" aria-hidden="true">#</a> grid-auto-flow</h3><p><code>grid-auto-flow</code> 控制网格自动布局的算法，精确指定在网格中被自动布局的元素怎样排列，它可以取以下值之一：</p><ul><li><code>row</code>：元素默认排列为先行后列。</li><li><code>column</code>：元素默认排列为先列后行。</li><li><code>row dense</code>：元素默认排列为先行后列，并且尽可能紧密填满，这可能导致在最后一行中出现较少的列。</li><li><code>column dense</code>：元素默认排列为先列后行，并且尽可能紧密填满，这可能导致在最后一列中出现较少的行。</li></ul>',3),w=t('<h3 id="grid-row-start-end" tabindex="-1"><a class="header-anchor" href="#grid-row-start-end" aria-hidden="true">#</a> grid-row-start/end</h3><p><code>grid-row-start</code> 属性指定了网格元素在网格行内的起始位置。<code>grid-row-end</code> 属性指定了网格元素在网格行内的结束位置。它们的取值可以是以下值之一：</p><ul><li><code>&lt;integer&gt;</code>：用行网格线的编号来指定位置。</li><li><code>&lt;name&gt;</code>：用行网格线的名称来指定位置。</li><li><code>span &lt;integer&gt;</code>：网格元素跨过多少个网格行。</li><li><code>span &lt;name&gt;</code>：网格元素跨过网格行名称。</li></ul>',3),y=n("h3",{id:"grid-column-start-end",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grid-column-start-end","aria-hidden":"true"},"#"),e(" grid-column-start/end")],-1),q=n("p",null,[n("code",null,"grid-column-start"),e(" 属性指定了网格元素在网格列内的起始位置。"),n("code",null,"grid-column-end"),e(" 属性指定了网格元素在网格列内的结束位置，它们的取值方式与 "),n("code",null,"grid-row-start"),e(" 和 "),n("code",null,"grid-row-end"),e(" 相似。")],-1),j=t(`<h3 id="grid-row-column" tabindex="-1"><a class="header-anchor" href="#grid-row-column" aria-hidden="true">#</a> grid-row/column</h3><p><code>grid-row</code> 属性是 <code>grid-row-start</code> 和 <code>grid-row-end</code> 的合并简写形式，<code>grid-column</code> 属性是 <code>grid-column-start</code> 和 <code>grid-column-end</code> 的合并简写形式。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* grid-row */</span>
<span class="token selector">.item-1</span> <span class="token punctuation">{</span>
   <span class="token property">grid-row</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
   <span class="token property">grid-row</span><span class="token punctuation">:</span> 3 / 1<span class="token punctuation">;</span>
   <span class="token property">grid-row</span><span class="token punctuation">:</span> 2 / -1<span class="token punctuation">;</span>
   <span class="token property">grid-row</span><span class="token punctuation">:</span> 1 / span 2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* grid-column */</span>
<span class="token selector">.item-2</span><span class="token punctuation">{</span>
   <span class="token property">grid-column</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
   <span class="token property">grid-column</span><span class="token punctuation">:</span> 3 / 1<span class="token punctuation">;</span>
   <span class="token property">grid-column</span><span class="token punctuation">:</span> 2 / -1<span class="token punctuation">;</span>
   <span class="token property">grid-column</span><span class="token punctuation">:</span> 1 / span 2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gap" tabindex="-1"><a class="header-anchor" href="#gap" aria-hidden="true">#</a> gap</h3><p><code>gap</code> 指定了网格行和列之间的间隔大小。</p>`,5),S=t('<h3 id="justify-self-align-self" tabindex="-1"><a class="header-anchor" href="#justify-self-align-self" aria-hidden="true">#</a> justify-self/align-self</h3><p><code>justify-self</code> 属性设置了网格元素在网格容器当前行上的水平位置。<code>align-self</code> 属性设置了网格元素在网格容器当前列上的垂直位置，它可以取以下值之一：</p><ul><li><code>auto</code>：默认值，由浏览器自动设置水平位置。</li><li><code>start</code>：对齐网格元素的起始边缘。</li><li><code>end</code>：对齐网格元素的结束边缘。</li><li><code>center</code>：对齐网格元素的中心点。</li><li><code>stretch</code>：拉伸，占满网格容器整个宽度。</li></ul>',3),C=t(`<h3 id="place-self" tabindex="-1"><a class="header-anchor" href="#place-self" aria-hidden="true">#</a> place-self</h3><p><code>place-self</code> 属性是 <code>align-self</code> 和 <code>justify-self</code> 的合并简写形式。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
   <span class="token property">place-self</span><span class="token punctuation">:</span> &lt;align-self&gt; &lt;justify-self&gt;<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="align-content" tabindex="-1"><a class="header-anchor" href="#align-content" aria-hidden="true">#</a> align-content</h3><p><code>align-content</code> 属性用来控制当弹性容器有多根轴线时，弹性子元素在交叉轴上的对齐方式（对于设置了属性 <code>flex-wrap: nowrap</code> 的弹性容器无效），默认值是 <code>normal</code>，可以设置以下值：</p><ul><li><code>normal</code>：在一般布局方式下，效果与 <code>stretch</code> 一样</li><li><code>flex-start</code>：弹性子元素向交叉轴的起点对齐</li><li><code>flex-end</code>：弹性子元素向交叉轴的终点对齐</li><li><code>center</code>：弹性子元素向交叉轴的中心对齐</li><li><code>space-between</code>：将弹性子元素在交叉轴均匀分配，相邻元素间距离相同，交叉轴上第一个弹性子元素与起点对齐，最后一个与终点对齐</li><li><code>space-around</code>：将弹性子元素在交叉轴均匀分配，相邻元素间距离相同，交叉轴上第一个弹性子元素与最后一个与容器边界的间距是相邻元素间距的一半</li><li><code>space-evenly</code>：将弹性子元素在交叉轴均匀分配，每个弹性子元素在交叉轴的间距都相同（包括第一个与最后一个距离容器边界的间距）</li><li><code>baseline</code>：弹性子元素向基线对齐</li><li><code>stretch</code>：如果没有具体设置弹性子元素的高度，那么弹性子元素的高度会被拉伸到占满容器</li></ul>`,6),N=n("p",null,[e("网格布局的元素排列方式是默认先行后列的，如果想要修改默认排列，可以设置 "),n("code",null,"grid-auto-flow"),e(" 属性。")],-1),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_grid_layout/Basic_concepts_of_grid_layout",target:"_blank",rel:"noopener noreferrer"};function M(V,z){const s=o("Mgrid"),d=o("ExternalLinkIcon"),i=o("Minfo");return r(),l("div",null,[m,a(s,{prop:"grid-template-columns"}),h,k,a(s,{prop:"grid-template-rows"}),v,a(s,{prop:"grid-template-areas"}),b,a(s,{prop:"grid-auto-columns"}),f,_,a(s,{prop:"grid-auto-rows"}),x,a(s,{prop:"grid-auto-flow"}),w,a(s,{prop:["grid-row-start","grid-row-end"]}),y,q,a(s,{prop:["grid-column-start","grid-column-end"]}),j,a(s,{prop:"gap"}),S,a(s,{prop:["justify-self","align-self"]}),C,a(s,{prop:"align-content",item:"4"}),a(i,null,{default:p(()=>[N,n("p",null,[e("更多网格布局的信息请点击这里 "),n("a",B,[e("点击这里"),a(d)])])]),_:1})])}const I=c(g,[["render",M],["__file","03.html.vue"]]);export{I as default};
