import{_ as c,r as p,o as l,c as i,e as n,f as s,b as a,w as r,d as t}from"./app-b07f535f.js";const u={},d=t(`<h1 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h1><p>对象是一个抽象的概念，我们可以通过观察现实世界中某种事物的外貌及表现，总结归纳其行为特点，然后用对象的方式来定义和描述它，将现实的事物转化为计算机中的数据结构。通过这种方式，我们几乎可以描述现实世界的万事万物</p><p>在 JavaScript 中，对象（<code>Object</code>）是一种重要并且复杂的数据类型，它用于存储键值对和更复杂的实体，对象是引用类型的数据（非原始值），它的值存放在内存中，将内存中的引用地址存放在栈中赋值给变量</p><h2 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象" aria-hidden="true">#</a> 创建对象</h2><p>在 JavaScript 中，有几种方法可以创建对象：</p><ol><li>对象字面量：这是最简单的创建对象的方法。你可以使用花括号 <code>{}</code> 来定义一个对象，然后在其中定义属性和方法。例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">,</span>
     <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// do something</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>Object</code> 构造函数：你可以使用 <code>new Object()</code> 来创建一个新的对象实例，然后再为其添加属性和方法。例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span>property1 <span class="token operator">=</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span>property2 <span class="token operator">=</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span><span class="token function-variable function">method1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// do something</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>构造函数：你可以定义一个构造函数，然后使用 <code>new</code> 关键字来创建一个新的对象实例。构造函数通常用来创建具有相同属性和方法的多个对象。例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token parameter">property1<span class="token punctuation">,</span> property2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>property1 <span class="token operator">=</span> property1<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>property2 <span class="token operator">=</span> property2<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">method1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// do something</span>
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">let</span> myObject1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">let</span> myObject2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token string">&#39;value3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>对象创建后，会以键值对的形式将数据存储在内存中，在对象中，对象的键可以是任意字符形式的，对象的值可以是任意值</p><h3 id="new-关键字" tabindex="-1"><a class="header-anchor" href="#new-关键字" aria-hidden="true">#</a> new 关键字</h3><p>在上面的示例中，我们使用 <code>new</code> 关键字来创建了对象，那么这其中的过程是怎样的呢？</p><ol><li><code>new</code> 关键字首先会创建一个空对象</li><li>如果构造函数的 <code>prototype</code> 属性是一个对象，则将新对象的 <code>prototype</code> 属性指向构造函数的 <code>prototype</code> 属性，否则指向 <code>Object.prototype</code></li><li>调用构造函数，并将新对象作为构造函数的 <code>this</code> 进行绑定，将参数传递给构造函数</li><li>如果构造函数返回了一个对象，则返回该对象；否则返回新对象</li></ol><h2 id="对象的基本操作" tabindex="-1"><a class="header-anchor" href="#对象的基本操作" aria-hidden="true">#</a> 对象的基本操作</h2><p>在创建对象后，我们可以在创建的对象上进行一些基本操作</p><h3 id="添加属性和方法" tabindex="-1"><a class="header-anchor" href="#添加属性和方法" aria-hidden="true">#</a> 添加属性和方法</h3><p>我们可以通过对象来描述某种真实事物，而要想将之准确描述，为对象添加属性和方法是必不可少的，向对象添加属性或方法有两种形式：</p><ol><li>直接赋值：通过 <code>.</code> 或 <code>[]</code> 运算符来向对象添加属性或方法。例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span>newProperty <span class="token operator">=</span> <span class="token string">&#39;这是一个新属性&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>newProperty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 这是一个新属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">[</span><span class="token string">&#39;newProperty&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;这是一个新属性&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">[</span><span class="token string">&#39;newProperty&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 这是一个新属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>对象方法：通过 <code>Object.defineProperty()</code> 方法向对象添加属性或方法。例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">&#39;newProperty&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;这是一个新属性&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>newProperty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 这是一个新属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="删除对象的属性" tabindex="-1"><a class="header-anchor" href="#删除对象的属性" aria-hidden="true">#</a> 删除对象的属性</h3><p>我们可以通过 <code>delete</code> 运算符来删除对象的属性，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> myObject<span class="token punctuation">.</span>property1<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>property1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历对象的属性" tabindex="-1"><a class="header-anchor" href="#遍历对象的属性" aria-hidden="true">#</a> 遍历对象的属性</h3><p>我们可以通过 <code>for...in</code> 循环来遍历对象的属性，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> property <span class="token keyword">in</span> myObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>property <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> myObject<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断属性是否存在" tabindex="-1"><a class="header-anchor" href="#判断属性是否存在" aria-hidden="true">#</a> 判断属性是否存在</h3><p>我们可以通过 <code>in</code> 运算符来判断对象是否存在某个属性，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;property1&#39;</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;property3&#39;</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的方法" tabindex="-1"><a class="header-anchor" href="#对象的方法" aria-hidden="true">#</a> 对象的方法</h2><p>JS 在对象上内置了一些常用的方法，我们可以通过这些方法来操作对象，例如：</p><h3 id="object-keys" tabindex="-1"><a class="header-anchor" href="#object-keys" aria-hidden="true">#</a> Object.keys()</h3><p>我们可以通过 <code>Object.keys()</code> 方法来获取对象的所有属性的键，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;property1&#39;, &#39;property2&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-values" tabindex="-1"><a class="header-anchor" href="#object-values" aria-hidden="true">#</a> Object.values()</h3><p>我们可以通过 <code>Object.values()</code> 方法来获取对象的所有属性的值，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;value1&#39;, &#39;value2&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-entries" tabindex="-1"><a class="header-anchor" href="#object-entries" aria-hidden="true">#</a> Object.entries()</h3><p>我们可以通过 <code>Object.entries()</code> 方法来获取对象的所有属性的键值对，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [[&#39;property1&#39;, &#39;value1&#39;], [&#39;property2&#39;, &#39;value2&#39;]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-assign" tabindex="-1"><a class="header-anchor" href="#object-assign" aria-hidden="true">#</a> Object.assign()</h3><p>我们可以通过 <code>Object.assign()</code> 方法来将一个或多个对象的所有属性和方法合并到目标对象中，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property3</span><span class="token operator">:</span> <span class="token string">&#39;value3&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property4</span><span class="token operator">:</span> <span class="token string">&#39;value4&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property5</span><span class="token operator">:</span> <span class="token string">&#39;value5&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property6</span><span class="token operator">:</span> <span class="token string">&#39;value6&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: {property1: &#39;value1&#39;, property2: &#39;value2&#39;, property3: &#39;value3&#39;, property4: &#39;value4&#39;, property5: &#39;value5&#39;, property6: &#39;value6&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-freeze" tabindex="-1"><a class="header-anchor" href="#object-freeze" aria-hidden="true">#</a> Object.freeze()</h3><p>我们可以通过 <code>Object.freeze()</code> 方法来冻结一个对象，即无法再修改该对象的属性和方法，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>

myObject<span class="token punctuation">.</span>property1 <span class="token operator">=</span> <span class="token string">&#39;new value1&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 无效</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>property1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: value1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-seal" tabindex="-1"><a class="header-anchor" href="#object-seal" aria-hidden="true">#</a> Object.seal()</h3><p>我们可以通过 <code>Object.seal()</code> 方法来密封一个对象，即无法再添加新的属性和方法，但可以修改已有的属性和方法，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>

myObject<span class="token punctuation">.</span>property1 <span class="token operator">=</span> <span class="token string">&#39;new value1&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 有效</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>property1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: new value1</span>

myObject<span class="token punctuation">.</span>property3 <span class="token operator">=</span> <span class="token string">&#39;value3&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 无效</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>property3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),k={id:"object-is",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#object-is","aria-hidden":"true"},"#",-1),b={href:"http://Object.is",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>我们可以通过 <code>Object.is()</code> 方法来判断两个值是否相等，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> value2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的克隆" tabindex="-1"><a class="header-anchor" href="#对象的克隆" aria-hidden="true">#</a> 对象的克隆</h2><p>在使用对象时，由于对象引用数据类型的特点，有时我们不希望在使用对象时修改原对象，而是希望创建一个新的对象，来避免对原对象的影响，这时我们可以使用对象的克隆来创建一个新的对象</p><h3 id="浅层克隆" tabindex="-1"><a class="header-anchor" href="#浅层克隆" aria-hidden="true">#</a> 浅层克隆</h3><p>浅层克隆是指只复制对象的第一层属性，如果属性值是基本类型，则直接复制；如果属性值是引用类型，则只复制引用地址，即两个对象指向同一个内存地址，修改其中一个对象的属性，会影响到另一个对象的属性。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> originalObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property3</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">nestedProperty1</span><span class="token operator">:</span> <span class="token string">&#39;nested value1&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">nestedProperty2</span><span class="token operator">:</span> <span class="token string">&#39;nested value2&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> clonedObject <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> originalObject<span class="token punctuation">)</span><span class="token punctuation">;</span>

clonedObject<span class="token punctuation">.</span>property1 <span class="token operator">=</span> <span class="token string">&#39;new value1&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 修改克隆对象的属性</span>
clonedObject<span class="token punctuation">.</span>property3<span class="token punctuation">.</span>nestedProperty1 <span class="token operator">=</span> <span class="token string">&#39;new nested value1&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 修改克隆对象的嵌套对象的属性</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originalObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: {property1: &#39;value1&#39;, property2: &#39;value2&#39;, property3: {nestedProperty1: &#39;new nested value1&#39;, nestedProperty2: &#39;nested value2&#39;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clonedObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: {property1: &#39;value1&#39;, property2: &#39;value2&#39;, property3: {nestedProperty1: &#39;new nested value1&#39;, nestedProperty2: &#39;nested value2&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是对对象的浅层克隆（也叫浅拷贝）</p><h3 id="深层克隆" tabindex="-1"><a class="header-anchor" href="#深层克隆" aria-hidden="true">#</a> 深层克隆</h3><p>深层克隆是指复制对象的所有层属性，如果属性值是基本类型，则直接复制；如果属性值是引用类型，则递归复制属性值，即两个对象指向不同的内存地址，修改其中一个对象的属性，不会影响另一个对象的属性。例如：</p><p>当对象的结构很复杂时，我们就需要使用深层克隆（也叫深拷贝）来创建一个新的对象，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> originalObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">property1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">nestedObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">nestedProperty1</span><span class="token operator">:</span> <span class="token string">&#39;nested value1&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">nestedProperty2</span><span class="token operator">:</span> <span class="token string">&#39;nested value2&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> clonedObject <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>originalObject<span class="token punctuation">)</span><span class="token punctuation">;</span>

clonedObject<span class="token punctuation">.</span>nestedObject<span class="token punctuation">.</span>nestedProperty1 <span class="token operator">=</span> <span class="token string">&#39;new nested value1&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 修改克隆对象的嵌套对象</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originalObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: {property1: &#39;value1&#39;, property2: &#39;value2&#39;, nestedObject: {nestedProperty1: &#39;new nested value1&#39;, nestedProperty2: &#39;nested value2&#39;}}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的类型转换" tabindex="-1"><a class="header-anchor" href="#对象的类型转换" aria-hidden="true">#</a> 对象的类型转换</h2><p>在 JS 中，对象也可以通过某些规则转换成其他类型的数据（通常是原始值），这对我们开发需求或者解决问题很有帮助</p><p>对象转换通常有以下三种类型：</p><ul><li><code>string</code>：将对象转换成字符串</li><li><code>number</code>：将对象转换成数字</li><li><code>default</code>：针对少数运算，通常转换结果为 <code>number</code></li></ul><h3 id="转换规则" tabindex="-1"><a class="header-anchor" href="#转换规则" aria-hidden="true">#</a> 转换规则</h3><p>对象进行类型转换时，一般遵循如下规则：</p><ul><li><p>首先会调用对象上的 <code>[Symbol.toPrimitive](hint)</code> 方法（如果存在这个方法），这个方法是内建的方法，用来给类型转换方法命名，具体用法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>

    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">hint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hint: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hint<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> hint <span class="token operator">==</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// &#39;hint:default&#39; 100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>obj<span class="token punctuation">)</span>  <span class="token comment">// &#39;hint:number&#39; 101</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;hint:default&#39; 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果没有 <code>[Symbol.toPrimitive]</code> 方法，则按照以下顺序进行转换：</p><ul><li>如果 <code>hint</code> 是 <code>string</code>，则先尝试调用 <code>toString()</code> 方法，再尝试调用 <code>valueOf()</code> 方法</li><li>如果 <code>hint</code> 是 <code>number</code>，则先尝试调用 <code>valueOf()</code> 方法，再尝试调用 <code>toString()</code> 方法</li></ul></li></ul><p>这些方法都必须返回一个原始值</p>`,20),y=n("code",null,"hint",-1),g=n("code",null,"string",-1),h=n("code",null,"number",-1),j=n("code",null,"default",-1),f={href:"https://tc39.github.io/ecma262/#sec-toprimitive",target:"_blank",rel:"noopener noreferrer"};function w(O,x){const e=p("ExternalLinkIcon"),o=p("Minfo");return l(),i("div",null,[d,n("h3",k,[v,s(),n("a",b,[s("Object.is"),a(e)]),s("()")]),m,a(o,null,{default:r(()=>[n("p",null,[y,s(" 参数的取值可以是 "),g,s("、"),h,s("、"),j,s("，分别表示将对象转换成字符串、数字、其他类型，更多详细信息请 点击"),n("a",f,[s("这里"),a(e)])])]),_:1})])}const P=c(u,[["render",w],["__file","07.html.vue"]]);export{P as default};
