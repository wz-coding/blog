import{_ as e,o,c as d,d as c}from"./app-fb571044.js";const t={},i=c('<h1 id="vue3-生命周期" tabindex="-1"><a class="header-anchor" href="#vue3-生命周期" aria-hidden="true">#</a> Vue3 生命周期</h1><p>生命周期是 Vue 中的一个重要概念，它描述了 Vue 组件从创建到销毁的整个过程，实际上是向我们暴露了组件代码在执行期间各个阶段的不同状态。我们可以利用 Vue 在不同生命周期状态下提供的钩子函数（hooks），向其中加入自己的逻辑，从而实现各种不同的功能。</p><h2 id="生命周期分类" tabindex="-1"><a class="header-anchor" href="#生命周期分类" aria-hidden="true">#</a> 生命周期分类</h2><p>这里所展示的组件的生命周期主要以 Vue3 组合式 API 为准，它们分别是：</p><ul><li><code>onBeforeMount()</code>：在组件被挂载之前调用。此时组件的响应式状态（即组件内部的数据）已经设置完成，渲染函数也已经首次完成调用，但是组件还没有渲染到页面上生成真实的 DOM。</li><li><code>onMounted()</code>：在组件已经挂载后调用。此时组件已经渲染到了页面上（即组件已经在页面上生成了真实的 DOM，这个时候可以访问到组件的 DOM 元素）。</li><li><code>onBeforeUpdate()</code>：在组件的响应式状态（即组件的数据）发生变化时调用。此时响应式状态已经改变但是组件对应的真实 DOM 还没有更新渲染。</li><li><code>onUpdated</code>：在组件的响应式状态（即组件的数据）发生变化并且组件的 DOM 也已经更新完成后调用。</li><li><code>onBeforeUnmount()</code>：在组件被卸载之前调用。此时组件实例依然存在，组件还具有完整的功能。</li><li><code>onUnmounted()</code>：在组件的实例被卸载之后调用。此时组件的实例已经被移除（与组件相关的响应式作用已经停止）。</li><li><code>onActived()</code>：在使用 <code>&lt;KeepAlive&gt;</code> 内置组件时，当被缓存的组件激活时调用。此时缓存的组件被插入到 DOM 树中。</li><li><code>onDeactived()</code>：在使用 <code>&lt;KeepAlive&gt;</code> 内置组件时，当被缓存的组件失活时调用。此时缓存的组件被从 DOM 树中移除。</li></ul><h2 id="setup-函数" tabindex="-1"><a class="header-anchor" href="#setup-函数" aria-hidden="true">#</a> setup() 函数</h2>',6),a=[i];function n(l,r){return o(),d("div",null,a)}const s=e(t,[["render",n],["__file","02.html.vue"]]);export{s as default};
