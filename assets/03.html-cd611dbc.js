import{_ as o,r as p,o as t,c,b as l,w as i,d as a,e as n,f as s}from"./app-858a5c0a.js";const u={},r=a(`<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h1><p>JavaScript 中有许多不同类型的运算符，包括算术运算符、比较运算符、逻辑运算符、赋值运算符、位运算符和其他运算符</p><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h2><p>算术运算符用于执行基本的数学运算。这些运算符包括：</p><ul><li>加法（<code>+</code>）：将两个操作数相加</li><li>减法（<code>-</code>）：从第一个操作数中减去第二个操作数</li><li>乘法（<code>*</code>）：将两个操作数相乘</li><li>除法（<code>/</code>）：将第一个操作数除以第二个操作数</li><li>取模（<code>%</code>）：返回第一个操作数除以第二个操作数的余数</li><li>指数（<code>**</code>）：返回第一个操作数的第二个操作数次幂</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token comment">// 7</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span>    <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span>    <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">/</span> y<span class="token punctuation">)</span>    <span class="token comment">// 2.5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">%</span> y<span class="token punctuation">)</span>    <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">**</span> y<span class="token punctuation">)</span>   <span class="token comment">// 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h2><p>比较运算符用于比较两个值。这些运算符包括：</p><ul><li>等于（<code>==</code>）：如果两个操作数相等，则返回 true</li><li>不等于（<code>!=</code>）：如果两个操作数不相等，则返回 true</li><li>全等（<code>===</code>）：如果两个操作数相等且类型相同，则返回 true</li><li>不全等（<code>!==</code>）：如果两个操作数不相等或类型不同，则返回 true</li><li>大于（<code>&gt;</code>）：如果第一个操作数大于第二个操作数，则返回 true</li><li>大于等于（<code>&gt;=</code>）：如果第一个操作数大于或等于第二个操作数，则返回 true</li><li>小于（<code>&lt;</code>）：如果第一个操作数小于第二个操作数，则返回 true</li><li>小于等于（<code>&lt;=</code>）：如果第一个操作数小于或等于第二个操作数，则返回 true</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">&#39;5&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span>   <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> y<span class="token punctuation">)</span>   <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">===</span> y<span class="token punctuation">)</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">!==</span> y<span class="token punctuation">)</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span>    <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span>   <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span>    <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span>   <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><p>逻辑运算符用于测试多个条件。这些运算符包括：</p><ul><li>与（<code>&amp;&amp;</code>）：如果两个操作数都为 true，则返回 true</li><li>或（<code>||</code>）：如果两个操作数中至少有一个为 true，则返回 true</li><li>非（<code>!</code>）：如果操作数为 true，则返回 false；如果操作数为 false，则返回 true</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">3</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><p>赋值运算符用于将值赋给变量。这些运算符包括：</p><ul><li>赋值（<code>=</code>）：将右侧操作数的值赋给左侧操作数</li><li>加赋值（<code>+=</code>）：将右侧操作数加上左侧操作数的值，然后将结果赋给左侧操作数</li><li>减赋值（<code>-=</code>）：将左侧操作数减去右侧操作数的值，然后将结果赋给左侧操作数</li><li>乘赋值（<code>*=</code>）：将右侧操作数乘以左侧操作数的值，然后将结果赋给左侧操作数</li><li>除赋值（<code>/=</code>）：将左侧操作数除以右侧操作数的值，然后将结果赋给左侧操作数</li><li>取模赋值（<code>%=</code>）：将左侧操作数除以右侧操作数的余数，然后将结果赋给左侧操作数</li><li>指数赋值（<code>**=</code>）：将左侧操作数进行右侧操作数次幂计算，然后将结果赋给左侧操作数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+=</span> y<span class="token punctuation">)</span>   <span class="token comment">// x = x + y = 7</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">-=</span> y<span class="token punctuation">)</span>   <span class="token comment">// x = x - y = 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">*=</span> y<span class="token punctuation">)</span>   <span class="token comment">// x = x * y = 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">/=</span> y<span class="token punctuation">)</span>   <span class="token comment">// x = x / y = 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">%=</span> y<span class="token punctuation">)</span>   <span class="token comment">// x = x % y = 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">**=</span> y<span class="token punctuation">)</span>  <span class="token comment">// x = x ** y = 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h2><p>位运算符用于对整数进行二进制位操作。这些运算符包括：</p><ul><li>按位与（<code>&amp;</code>）：对两个操作数的每一位执行逻辑与操作</li><li>按位或（<code>|</code>）：对两个操作数的每一位执行逻辑或操作</li><li>按位异或（<code>^</code>）：对两个操作数的每一位执行逻辑异或操作</li><li>按位非（<code>~</code>）：对操作数的每一位执行逻辑非操作</li><li>左移（<code>&lt;&lt;</code>）：将左侧操作数的二进制表示向左移动右侧操作数指定的位数</li><li>有符号右移（<code>&gt;&gt;</code>）：将左侧操作数的二进制表示向右移动右侧操作数指定的位数，保留符号位</li><li>无符号右移（<code>&gt;&gt;&gt;</code>）：将左侧操作数的二进制表示向右移动右侧操作数指定的位数，不保留符号位</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span>   <span class="token comment">// 0101</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">3</span>   <span class="token comment">// 0011</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">)</span>   <span class="token comment">// 0001</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">|</span> y<span class="token punctuation">)</span>   <span class="token comment">// 0111</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span>   <span class="token comment">// 0110</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span>      <span class="token comment">// 1010</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> y<span class="token punctuation">)</span>  <span class="token comment">// 0101000</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">)</span>  <span class="token comment">// 0000</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;&gt;</span> y<span class="token punctuation">)</span> <span class="token comment">// 0000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),d=n("p",null,"在 JavaScript 中，整数通常用 32 位二进制补码形式表示。这意味着每个整数都用 32 位二进制数表示，不足 32 位的前面补 0",-1),k=n("p",null,[s("例如，5 的二进制表示为 "),n("code",null,"101"),s("，但是由于 JavaScript 中整数用 32 位二进制补码形式表示，所以我们需要在前面补上 29 个 0，得到 "),n("code",null,"00000000000000000000000000000101")],-1),m=n("p",null,"将一个负整数转换为二进制，我们可以先取它的绝对值，然后将其转换为二进制，再取反并加 1",-1),v=n("p",null,"例如，要将 -5 转换为二进制，我们可以按照以下步骤进行：",-1),b=n("ul",null,[n("li",null,[s("取绝对值："),n("code",null,"5")]),n("li",null,[s("转换为二进制："),n("code",null,"00000000000000000000000000000101")]),n("li",null,[s("取反："),n("code",null,"11111111111111111111111111111010")]),n("li",null,[s("加 1："),n("code",null,"11111111111111111111111111111011")])],-1),g=n("p",null,[s("最后求出 -5 的二进制表示为 "),n("code",null,"11111111111111111111111111111011")],-1),x=a(`<h2 id="其他的运算符" tabindex="-1"><a class="header-anchor" href="#其他的运算符" aria-hidden="true">#</a> 其他的运算符</h2><p>在 JavaScript 中除了上述的运算符以外，还有一些其他的常用的运算符，包括三元条件运算符、逗号运算符、类型运算符、实例化运算符</p><h3 id="三元条件运算符" tabindex="-1"><a class="header-anchor" href="#三元条件运算符" aria-hidden="true">#</a> 三元条件运算符</h3><p>三元条件运算符（<code>? :</code>）用于根据条件执行不同的操作。它的用法为：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>condition <span class="token operator">?</span> exprIfTrue <span class="token operator">:</span> exprIfFalse
</code></pre></div><p>其中，condition 是一个表达式，用于判断条件是否成立。如果 condition 为 true，则执行 exprIfTrue；否则执行 exprIfFalse</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">3</span>

<span class="token keyword">let</span> max <span class="token operator">=</span> x <span class="token operator">&gt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span>  <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符" aria-hidden="true">#</a> 逗号运算符</h3><p>逗号运算符（<code>,</code>）用于连接多个表达式。它会按照从左到右的顺序依次计算每个表达式，并返回最后一个表达式的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span>
x <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>  <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用逗号运算符连接了两个表达式：x++ 和 x。由于逗号运算符会返回最后一个表达式的值，所以 x 的值为 2</p><h3 id="类型运算符" tabindex="-1"><a class="header-anchor" href="#类型运算符" aria-hidden="true">#</a> 类型运算符</h3><p>在 JavaScript 中有两个类型运算符：<code>typeof</code> 和 <code>instanceof</code></p><p><code>typeof</code> 用于返回一个值的数据类型，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span>  <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>instanceof</code> 用于检查一个对象是否为指定构造函数的实例，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例化运算符" tabindex="-1"><a class="header-anchor" href="#实例化运算符" aria-hidden="true">#</a> 实例化运算符</h3><p>实例化运算符，既是我们常用的 <code>new</code>，new 运算符用于创建一个指定类型的新对象。它的用法为：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">constructor</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span>arguments<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre></div><p>其中，constructor 是一个构造函数，用于指定新对象的类型。arguments 是一个可选参数，用于传递给构造函数，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;2023-07-11&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token comment">//Tue Jul 11 2023 08:00:00 GMT+0800 (中国标准时间)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span>   <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function h(f,y){const e=p("Minfo");return t(),c("div",null,[r,l(e,null,{default:i(()=>[d,k,m,v,b,g]),_:1}),x])}const _=o(u,[["render",h],["__file","03.html.vue"]]);export{_ as default};
