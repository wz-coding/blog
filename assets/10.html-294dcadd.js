import{_ as a,r as t,o as p,c as o,b as e,f as n}from"./app-b05cb820.js";const c="/blog/assets/image/proto.png",l={},i=n('<h1 id="原型与原型链" tabindex="-1"><a class="header-anchor" href="#原型与原型链" aria-hidden="true">#</a> 原型与原型链</h1><p>原型和原型链是对象上的一个重要的特性，它们是 JavaScript 中实现继承和共享属性的基础，也是我们在学习对象的过程中一个非常重要的知识点。</p><p>下图是浏览器中对象的原型结构图：</p><figure><img src="'+c+`" alt="原型" tabindex="0" loading="lazy"><figcaption>原型</figcaption></figure><h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h2><p>每个对象都有一个原型对象，可以通过<code>__proto__</code>属性访问，当我们在读取对象上的某一个属性时，如果对象本身没有定义这个属性，那么就会从对象的原型对象上查找该属性，这种现象叫做 <strong>原型继承</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">smell</span><span class="token operator">:</span><span class="token string">&#39;sweet&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">weight</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">200</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">g</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> apple<span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;red&#39;</span>
<span class="token punctuation">}</span>
apple<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fruit<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>smell<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &#39;sweet&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &#39;200g&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们将 <code>apple</code> 对象的原型对象设置为 <code>fruit</code> 对象，所以它便继承了 <code>smell</code> 属性和 <code>weight</code> 方法。</p><h2 id="proto-与-prototype" tabindex="-1"><a class="header-anchor" href="#proto-与-prototype" aria-hidden="true">#</a> proto 与 [[prototype]]</h2><p>在上面图片与示例代码中，我们发现对象的原型对象是通过 <code>__proto__</code> 属性访问的，而在浏览器中却展示的是 <code>[[prototype]]</code>，那么它们有什么区别呢？</p><ul><li><code>__proto__</code> 是一个已经弃用了的属性（虽然还有浏览器仍然支持访问这个属性），用于访问对象的原型对象（一般不推荐直接使用）。</li><li><code>[[prototype]]</code> 是一个标准属性，它存在于所有对象中，用于访问对象的原型对象。</li></ul><p>在浏览器中，<code>__proto__</code> 属性是 <code>[[prototype]]</code> 的非标准别名，它们的作用完全相同。如果想要操作对象的原型对象，推荐以下方法：</p><ul><li>使用 <code>Object.getPrototypeOf(obj)</code> 方法获取对象的原型对象。</li><li>使用 <code>Object.setPrototypeOf(obj, newProto)</code> 方法设置对象的原型对象。</li></ul><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h2><p>原型链是一种由原型对象组成的链式结构，用于实现继承和共享属性。当访问一个对象的属性时，JavaScript 会首先在当前对象中查找，如果没有找到，则会沿着原型链向上查找，直到找到为止。</p><p>原型链的终点是 <code>null</code>，表示原型链的结束。</p>`,16),u=n(`<h2 id="原型链的用途" tabindex="-1"><a class="header-anchor" href="#原型链的用途" aria-hidden="true">#</a> 原型链的用途</h2><p>原型链是 JavaScript 中实现继承和共享属性的基础，它使得对象可以继承其他对象上的属性和方法。原型链的用途包括但不限于：</p><ul><li><p>实现继承：通过原型链，子对象可以继承父对象的属性和方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">smell</span><span class="token operator">:</span><span class="token string">&#39;sweet&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">weight</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">200</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">g</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> apple<span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;red&#39;</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>apple<span class="token punctuation">,</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>smell<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &#39;sweet&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &#39;200g&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实现共享属性：通过原型链，多个对象可以共享同一个原型对象上的属性和方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">smell</span><span class="token operator">:</span><span class="token string">&#39;sweet&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">weight</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">200</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">g</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> apple<span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;red&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> banana<span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;yellow&#39;</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>apple<span class="token punctuation">,</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>banana<span class="token punctuation">,</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>smell<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &#39;sweet&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>banana<span class="token punctuation">.</span>smell<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &#39;sweet&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &#39;200g&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>banana<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 &#39;200g&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实现动态属性：通过原型链，可以在运行时为对象添加新的属性和方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">smell</span><span class="token operator">:</span><span class="token string">&#39;sweet&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">weight</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">200</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">g</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> apple<span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;red&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> banana<span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">&#39;yellow&#39;</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>apple<span class="token punctuation">,</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>banana<span class="token punctuation">,</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>

fruit<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
fruit<span class="token punctuation">.</span><span class="token function-variable function">getColor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>smell<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &#39;sweet&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>banana<span class="token punctuation">.</span>smell<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &#39;sweet&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &#39;red&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>banana<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &#39;yellow&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>banana<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,3);function r(k,d){const s=t("Mermaid");return p(),o("div",null,[i,e(s,{id:"mermaid-64",code:"eJxLL0osyFDwCeJKLCjISVXQ1S0oyi/JL6ksSNXVtVNIKyrNLOECk+hS/klZqcklenAxLnQBdA15pTk5XACW8CeI"}),u])}const m=a(l,[["render",r],["__file","10.html.vue"]]);export{m as default};
