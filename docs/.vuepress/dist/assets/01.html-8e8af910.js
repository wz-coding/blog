import{_ as r,M as c,p as i,q as g,N as l,V as a,R as t,t as e,a1 as d}from"./framework-5866ffd3.js";const p={},h=d('<h1 id="html-基础概念" tabindex="-1"><a class="header-anchor" href="#html-基础概念" aria-hidden="true">#</a> HTML 基础概念</h1><h2 id="标签与元素" tabindex="-1"><a class="header-anchor" href="#标签与元素" aria-hidden="true">#</a> 标签与元素</h2><p>在上一节介绍中我们了解了 <strong>HTML</strong> 是一种用于定义内容结构的标记语言，它由一系列的 <em><strong>元素</strong></em> 组成，这些元素可以用来包围不同部分的内容，在页面上以 <em><strong>标签</strong></em> 的形式呈现。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><em><strong>标签</strong></em>：在 <strong>HTML</strong> 中，标签 用来创建一个 元素。<strong>HTML</strong> 元素的名称是在尖括号中使用的名称。</p><p><em><strong>元素</strong></em>：元素是网页的一部分，在 <strong>XML</strong> 和 <strong>HTML</strong> 中，一个元素可以包含一个数据项，或是一块文本，或是一张照片，亦或是什么也不包含。一个典型的元素包括一个具有一些属性的开始标签，中间的文本内容和一个结束标签。</p><p><em><strong>元素</strong></em> 和 <em><strong>标签</strong></em> 不是同一种概念。代码中的标签用来标识元素的开始或结束，而元素是文档对象模型（DOM）中的一部分，文档对象模型会被浏览器渲染、展示为页面。</p></div><h2 id="元素的结构" tabindex="-1"><a class="header-anchor" href="#元素的结构" aria-hidden="true">#</a> 元素的结构</h2><p>我们会以段落标签 <code>&lt;p&gt;</code> 为例，来了解元素的结构</p><h3 id="元素的组成" tabindex="-1"><a class="header-anchor" href="#元素的组成" aria-hidden="true">#</a> 元素的组成</h3>',7),u=t("div",{class:"language-html","data-ext":"html"},[t("pre",{class:"language-html"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("p")]),e(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},"'"),e("content"),t("span",{class:"token punctuation"},"'")]),t("span",{class:"token punctuation"},">")]),e(" Hello World! "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("p")]),t("span",{class:"token punctuation"},">")]),e(`
`)])])],-1),f=d('<ol><li><strong>开始标签</strong>（Opening tag）包含元素的名称（本例为 p），被大于号、小于号所包围。表示元素从这里开始或者开始起作用 —— 在本例中即段落由此开始。</li><li><strong>结束标签</strong>（Closing tag）与开始标签相似，只是其在元素名之前包含了一个斜杠。这表示着元素的结尾 —— 在本例中即段落在此结束。</li><li><strong>内容</strong>（Content）元素的内容，本例中就是所输入的文本（‘ this is a paragraph ’）。</li><li><strong>元素</strong>（Element）开始标签、结束标签与内容相结合，便是一个完整的元素。</li></ol><h3 id="元素的属性" tabindex="-1"><a class="header-anchor" href="#元素的属性" aria-hidden="true">#</a> 元素的属性</h3><p><code>&lt;p class=&#39;content&#39;&gt;...&lt;/p&gt;</code></p><p>其中的class便是 <code>&lt;p&gt;</code> 标签的属性，属性包含了关于元素的一些额外信息，这些信息本身不应显现在内容中。本例中，class 是属性名称，content 是属性的值。class 属性可为元素提供一个标识名称，以便进一步为元素指定样式或进行其他操作时使用。</p><p>元素的属性应该包含</p><ol><li>在属性与元素名称（或上一个属性，如果有超过一个属性的话）之间的空格符。</li><li>属性的名称，并接上一个等号。</li><li>由引号所包围的属性值。</li></ol>',6),x={class:"custom-container tip"},y=t("p",{class:"custom-container-title"},"提示",-1),k=t("p",null,"不包含 ASCII 空格（以及 \" ' ` = < > ）的简单属性值可以不使用引号，但是建议将所有属性值用引号括起来，这样的代码一致性更佳，更易于阅读。",-1),m=t("strong",null,"HTML",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes",target:"_blank",rel:"noopener noreferrer"},b=t("h3",{id:"嵌套元素",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#嵌套元素","aria-hidden":"true"},"#"),e(" 嵌套元素")],-1),v=t("p",null,[e("也可以将一个元素置于其他元素之中 —— 称作 "),t("em",null,[t("strong",null,"嵌套")]),e("。例如以下代码")],-1),T=t("div",{class:"language-html","data-ext":"html"},[t("pre",{class:"language-html"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("p")]),t("span",{class:"token punctuation"},">")]),e(" this is an "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("strong")]),t("span",{class:"token punctuation"},">")]),e(" example "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("strong")]),t("span",{class:"token punctuation"},">")]),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("p")]),t("span",{class:"token punctuation"},">")]),e(`
`)])])],-1),E=d('<p>在嵌套元素时，必须保证元素嵌套次序正确上面的代码首先使用 <code>&lt;p&gt;</code> 标签，然后是 <code>&lt;strong&gt;</code> 标签，因此要先结束 <code>&lt;strong&gt;</code> 标签，最后再结束 <code>&lt;p&gt;</code> 标签。</p><p>在写嵌套元素时，标签闭合的顺序应当是<strong>先写的标签最后闭合，后写的标签最先闭合</strong>。</p><div class="custom-container danger"><p class="custom-container-title">警告</p><p><code>&lt;p&gt; this is an &lt;strong&gt; example &lt;/p&gt;&lt;/strong&gt;</code></p><p>这样的写法是不对的，没有按照正确的顺序将标签闭合</p></div><h3 id="空元素" tabindex="-1"><a class="header-anchor" href="#空元素" aria-hidden="true">#</a> 空元素</h3><p>不包含任何内容的元素称为空元素。比如 <code>&lt;img&gt;</code> 元素</p>',5),M=t("div",{class:"language-html","data-ext":"html"},[t("pre",{class:"language-html"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("img")]),e(),t("span",{class:"token attr-name"},"src"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("../xx.png"),t("span",{class:"token punctuation"},'"')]),e(),t("span",{class:"token attr-name"},"alt"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("test image"),t("span",{class:"token punctuation"},'"')]),e(),t("span",{class:"token punctuation"},"/>")]),e(`
`)])])],-1),L=d('<p>上面的 <code>&lt;img&gt;</code> 元素包含两个属性，但是并没有 &lt;/img&gt; 结束标签，元素里也没有内容。这是因为图像元素不需要通过内容来产生效果，它的作用是向其所在的位置嵌入一个图像。</p><p>像 <code>&lt;img&gt;</code> 这样的空元素在 <strong>HTML</strong> 中还有许多，我们将会在接下来的内容中学习到他们。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在 <strong>HTML</strong> 中，无需在一个空元素的标签末尾添加 /。但如同上面 <code>&lt;img&gt;</code> 元素的例子。然而，这也是一种有效的语法，当你希望你的 <strong>HTML</strong> 是有效的 <strong>XML</strong> 时，这么做也没问题。</p></div><h2 id="元素的分类" tabindex="-1"><a class="header-anchor" href="#元素的分类" aria-hidden="true">#</a> 元素的分类</h2><p>在 <strong>HTML</strong> 中元素大多数都是“块级”元素或行内元素。按照元素在浏览器页面中的表现，大体可以将元素分为以下两类</p><h3 id="块级元素" tabindex="-1"><a class="header-anchor" href="#块级元素" aria-hidden="true">#</a> 块级元素</h3><p>块级元素占据其父元素（容器）的整个水平空间，垂直空间等于其内容高度，因此创建了一个“块”。</p><h3 id="行内元素" tabindex="-1"><a class="header-anchor" href="#行内元素" aria-hidden="true">#</a> 行内元素</h3><p>行内元素只占据它对应标签的边框所包含的空间。</p><h3 id="块级元素与行内元素的区别" tabindex="-1"><a class="header-anchor" href="#块级元素与行内元素的区别" aria-hidden="true">#</a> 块级元素与行内元素的区别</h3><table><thead><tr><th style="text-align:left;">分类</th><th style="text-align:left;">格式</th><th style="text-align:left;">内容</th></tr></thead><tbody><tr><td style="text-align:left;">行内元素</td><td style="text-align:left;">默认情况下，行内元素不会以新行开始</td><td style="text-align:left;">一般情况下，行内元素只能包含数据和其他行内元素</td></tr><tr><td style="text-align:left;">块级元素</td><td style="text-align:left;">默认情况下，块级元素会新起一行</td><td style="text-align:left;">一般块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构</td></tr></tbody></table><h3 id="常见的块级元素与行内元素" tabindex="-1"><a class="header-anchor" href="#常见的块级元素与行内元素" aria-hidden="true">#</a> 常见的块级元素与行内元素</h3><p>下面列举了一些常见的 <a href="#%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E5%88%97%E8%A1%A8">块级元素</a>与 <a href="#%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%88%97%E8%A1%A8">行内元素</a>。</p><h4 id="块级元素列表" tabindex="-1"><a class="header-anchor" href="#块级元素列表" aria-hidden="true">#</a> 块级元素列表</h4><table><thead><tr><th style="text-align:left;">元素</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;address&gt;</code></td><td style="text-align:left;">联系方式信息</td></tr><tr><td style="text-align:left;"><code>&lt;article&gt;</code></td><td style="text-align:left;">文章内容</td></tr><tr><td style="text-align:left;"><code>&lt;aside&gt;</code></td><td style="text-align:left;">伴随内容</td></tr><tr><td style="text-align:left;"><code>&lt;blockquote&gt;</code></td><td style="text-align:left;">块引用</td></tr><tr><td style="text-align:left;"><code>&lt;dd&gt;</code></td><td style="text-align:left;">定义列表中定义条目描述</td></tr><tr><td style="text-align:left;"><code>&lt;div&gt;</code></td><td style="text-align:left;">文档分区</td></tr><tr><td style="text-align:left;"><code>&lt;dl&gt;</code></td><td style="text-align:left;">定义列表</td></tr><tr><td style="text-align:left;"><code>&lt;fieldset&gt;</code></td><td style="text-align:left;">表单元素分组</td></tr><tr><td style="text-align:left;"><code>&lt;figcaption&gt;</code></td><td style="text-align:left;">图文信息组标题</td></tr><tr><td style="text-align:left;"><code>&lt;figure&gt;</code></td><td style="text-align:left;">图文信息组</td></tr><tr><td style="text-align:left;"><code>&lt;footer&gt;</code></td><td style="text-align:left;">区段尾或页尾</td></tr><tr><td style="text-align:left;"><code>&lt;form&gt;</code></td><td style="text-align:left;">表单</td></tr><tr><td style="text-align:left;"><code>&lt;h1&gt;</code>,<code>&lt;h2&gt;</code>,<code>&lt;h3&gt;</code>,<code>&lt;h4&gt;</code>,<code>&lt;h5&gt;</code>,<code>&lt;h6&gt;</code></td><td style="text-align:left;">标题级别 1-6</td></tr><tr><td style="text-align:left;"><code>&lt;header&gt;</code></td><td style="text-align:left;">区段头或页头</td></tr><tr><td style="text-align:left;"><code>&lt;hgroup&gt;</code></td><td style="text-align:left;">标题组</td></tr><tr><td style="text-align:left;"><code>&lt;hr&gt;</code></td><td style="text-align:left;">水平分割线</td></tr><tr><td style="text-align:left;"><code>&lt;ol&gt;</code></td><td style="text-align:left;">有序列表</td></tr><tr><td style="text-align:left;"><code>&lt;p&gt;</code></td><td style="text-align:left;">段落、行</td></tr><tr><td style="text-align:left;"><code>&lt;pre&gt;</code></td><td style="text-align:left;">预格式化文本</td></tr><tr><td style="text-align:left;"><code>&lt;section&gt;</code></td><td style="text-align:left;">一个页面区段</td></tr><tr><td style="text-align:left;"><code>&lt;table&gt;</code></td><td style="text-align:left;">表格</td></tr><tr><td style="text-align:left;"><code>&lt;ul&gt;</code></td><td style="text-align:left;">无序列表</td></tr></tbody></table><h4 id="行内元素列表" tabindex="-1"><a class="header-anchor" href="#行内元素列表" aria-hidden="true">#</a> 行内元素列表</h4><table><thead><tr><th style="text-align:left;">元素</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;b&gt;</code></td><td style="text-align:left;">字体加粗显示</td></tr><tr><td style="text-align:left;"><s><code>&lt;big&gt;</code></s></td><td style="text-align:left;">字体加大显示（已废弃）</td></tr><tr><td style="text-align:left;"><code>&lt;i&gt;</code></td><td style="text-align:left;">术语文本元素，将内容以斜体显示</td></tr><tr><td style="text-align:left;"><code>&lt;small&gt;</code></td><td style="text-align:left;">字体变小显示（表示边注释和附属细则，包括版权和法律文本）</td></tr><tr><td style="text-align:left;"><s><code>&lt;tt&gt;</code></s></td><td style="text-align:left;">电报文本元素（已废弃）</td></tr><tr><td style="text-align:left;"><code>&lt;abbr&gt;</code></td><td style="text-align:left;">缩写元素</td></tr><tr><td style="text-align:left;"><s><code>&lt;acronym&gt;</code></s></td><td style="text-align:left;">缩写元素（已废弃）</td></tr><tr><td style="text-align:left;"><code>&lt;cite&gt;</code></td><td style="text-align:left;">表示引用，引用标签</td></tr><tr><td style="text-align:left;"><code>&lt;code&gt;</code></td><td style="text-align:left;">呈现一段计算机代码</td></tr><tr><td style="text-align:left;"><code>&lt;dfn&gt;</code></td><td style="text-align:left;">定义元素，表示术语的一个定义</td></tr><tr><td style="text-align:left;"><code>&lt;em&gt;</code></td><td style="text-align:left;">着重元素，将内容以斜体显示</td></tr><tr><td style="text-align:left;"><code>&lt;kbd&gt;</code></td><td style="text-align:left;">键盘输入元素，表示用户输入</td></tr><tr><td style="text-align:left;"><code>&lt;strong&gt;</code></td><td style="text-align:left;">强调元素，表示文本十分重要，将内容以粗体显示</td></tr><tr><td style="text-align:left;"><code>&lt;samp&gt;</code></td><td style="text-align:left;">标识计算机程序输出，类似与<code>&lt;code&gt;</code>元素</td></tr><tr><td style="text-align:left;"><code>&lt;var&gt;</code></td><td style="text-align:left;">表示变量的元素，将内容以斜体显示</td></tr><tr><td style="text-align:left;"><code>&lt;a&gt;</code></td><td style="text-align:left;">锚元素</td></tr><tr><td style="text-align:left;"><code>&lt;bdo&gt;</code></td><td style="text-align:left;">双向文本替代元素，可改变内容书写的方向</td></tr><tr><td style="text-align:left;"><code>&lt;br&gt;</code></td><td style="text-align:left;">换行元素，生成一个换行（回车）符号</td></tr><tr><td style="text-align:left;"><code>&lt;img&gt;</code></td><td style="text-align:left;">图像嵌入元素，将一张图像嵌入文档</td></tr><tr><td style="text-align:left;"><code>&lt;map&gt;</code></td><td style="text-align:left;">定义一个图像映射 (一个可点击的链接区域),通常与 <code>&lt;area&gt;</code> 元素一起使用</td></tr><tr><td style="text-align:left;"><code>&lt;object&gt;</code></td><td style="text-align:left;">嵌入对象元素，表示引入一个外部资源</td></tr><tr><td style="text-align:left;"><code>&lt;q&gt;</code></td><td style="text-align:left;">引用标签，表示一个封闭的并且是短的行内引用的文本</td></tr><tr><td style="text-align:left;"><code>&lt;script&gt;</code></td><td style="text-align:left;">嵌入或引用可执行脚本</td></tr><tr><td style="text-align:left;"><code>&lt;span&gt;</code></td><td style="text-align:left;">空元素，没有任何特殊语义</td></tr><tr><td style="text-align:left;"><code>&lt;sub&gt;</code></td><td style="text-align:left;">下标元素</td></tr><tr><td style="text-align:left;"><code>&lt;sup&gt;</code></td><td style="text-align:left;">上标元素</td></tr><tr><td style="text-align:left;"><code>&lt;button&gt;</code></td><td style="text-align:left;">按钮元素</td></tr><tr><td style="text-align:left;"><code>&lt;input&gt;</code></td><td style="text-align:left;">输入（表单输入）元素</td></tr><tr><td style="text-align:left;"><code>&lt;label&gt;</code></td><td style="text-align:left;">标签元素，表示用户界面中某个元素的说明</td></tr><tr><td style="text-align:left;"><code>&lt;select&gt;</code></td><td style="text-align:left;">表示一个提供选项菜单的控件</td></tr><tr><td style="text-align:left;"><code>&lt;textarea&gt;</code></td><td style="text-align:left;">文本区域元素</td></tr></tbody></table><h3 id="怪异模式和标准模式" tabindex="-1"><a class="header-anchor" href="#怪异模式和标准模式" aria-hidden="true">#</a> 怪异模式和标准模式</h3><h4 id="历史背景" tabindex="-1"><a class="header-anchor" href="#历史背景" aria-hidden="true">#</a> 历史背景</h4><p>在很久以前的网络上，页面通常有两种版本：</p><ul><li>网景（Netscape）的 Navigator 版本</li><li>微软（Microsoft）的 Internet Explorer（IE） 版本</li></ul><p>后来，当 W3C 创立网络标准后，为了兼容已有的网站，浏览器不能直接弃用这些标准。因此，浏览器采用了两种模式，用以把能符合新规范的网站和老旧网站区分开。</p><h4 id="浏览器的排版模式" tabindex="-1"><a class="header-anchor" href="#浏览器的排版模式" aria-hidden="true">#</a> 浏览器的排版模式</h4><p>目前浏览器的排版引擎使用三种模式：</p><ol><li><strong>怪异模式</strong>（Quirks mode）：排版会模拟 Navigator 4 与 Internet Explorer 5 的非标准行为（为了支持在网络标准被广泛采用前，就已经建好的网站，这么做是必要的）</li><li><strong>接近标准模式</strong>（Almost standards mode）：行为即由 HTML 与 CSS 的规范描述的行为</li><li><strong>标准模式</strong>（Standards mode）：只有少数的怪异行为被实现</li></ol><h4 id="如何确定浏览器使用了哪种排版模式" tabindex="-1"><a class="header-anchor" href="#如何确定浏览器使用了哪种排版模式" aria-hidden="true">#</a> 如何确定浏览器使用了哪种排版模式</h4><p>既然浏览器的排版引擎所使用的排版模式有3种，那么如何确定浏览器具体使用的是哪一种排版模式呢？对 <strong>HTML</strong> 文件来说，浏览器使用文件开头的 DOCTYPE 来决定用怪异模式处理或标准模式处理。</p>',27),C=t("div",{class:"language-html line-numbers-mode","data-ext":"html"},[t("pre",{class:"language-html"},[t("code",null,[t("span",{class:"token doctype"},[t("span",{class:"token punctuation"},"<!"),t("span",{class:"token doctype-tag"},"DOCTYPE"),e(),t("span",{class:"token name"},"html"),t("span",{class:"token punctuation"},">")]),e(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("html")]),t("span",{class:"token punctuation"},">")]),e(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("head")]),t("span",{class:"token punctuation"},">")]),e(`
    `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("meta")]),e(),t("span",{class:"token attr-name"},"charset"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("UTF-8"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),e(`
    `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("title")]),t("span",{class:"token punctuation"},">")]),e("Hello World!"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("title")]),t("span",{class:"token punctuation"},">")]),e(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("head")]),t("span",{class:"token punctuation"},">")]),e(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("body")]),t("span",{class:"token punctuation"},">")]),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("body")]),t("span",{class:"token punctuation"},">")]),e(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("html")]),t("span",{class:"token punctuation"},">")]),e(`
`)])]),t("div",{class:"highlight-lines"},[t("div",{class:"highlight-line"}," "),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br")]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),H=t("p",null,[e("上面代码中的 "),t("code",null,"<!DOCTYPE html>"),e("，是所有可用的 DOCTYPE 之中最简单的，也是 HTML5 所推荐的。")],-1),D=t("p",null,[t("code",null,"<!DOCTYPE html>"),e(" 唯一的作用是启用标准模式。请确定你把 DOCTYPE 正确地置于 HTML 文件的顶端。如果有任何其他字符位于 DOCTYPE 之前，比如注释或 XML 声明，会导致 Internet Explorer 9 或更早期的浏览器触发怪异模式。")],-1),N=t("div",{class:"custom-container warning"},[t("p",{class:"custom-container-title"},"注意"),t("p",null,[e("请不要在页面中去使用其他更复杂的 DOCTYPE。如果你使用其他的 DOCTYPE，你可能会面临触发接近标准模式或者怪异模式的风险，这可能会使你的页面布局以及 "),t("strong",null,"CSS"),e(" 的解析出现意想不到的问题。")])],-1),A={class:"custom-container tip"},O=t("p",{class:"custom-container-title"},"提示",-1),I={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements",target:"_blank",rel:"noopener noreferrer"},P={href:"https://hsivonen.fi/doctype/",target:"_blank",rel:"noopener noreferrer"};function Y(q,B){const n=c("CodeGroupItem"),s=c("CodeGroup"),o=c("ExternalLinkIcon");return i(),g("div",null,[h,l(s,null,{default:a(()=>[l(n,{title:"HTML"},{default:a(()=>[u]),_:1})]),_:1}),f,t("div",x,[y,k,t("p",null,[e("关于 "),m,e(" 元素的属性还有很多，详情请参考 "),t("a",_,[e("MDN"),l(o)]),e("。")])]),b,v,l(s,null,{default:a(()=>[l(n,{title:"HTML"},{default:a(()=>[T]),_:1})]),_:1}),E,l(s,null,{default:a(()=>[l(n,{title:"HTML"},{default:a(()=>[M]),_:1})]),_:1}),L,l(s,null,{default:a(()=>[l(n,{title:"HTML"},{default:a(()=>[C]),_:1})]),_:1}),H,D,N,t("div",A,[O,t("p",null,[e("以上数据均来自 "),t("a",I,[e("MDN"),l(o)]),e(" 。有关浏览器排版模式的详细内容请参考 "),t("a",P,[e("浏览器如何选择各种模式"),l(o)])])])])}const G=r(p,[["render",Y],["__file","01.html.vue"]]);export{G as default};
