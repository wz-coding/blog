//CSS 属性
export const Propertys = {
    A: [
        { code: 'abs()', desc: 'CSS 函数，返回参数的绝对值', lang: 'en-US', linkParam: 'abs' },
        { code: 'accent-color', desc: '为某些元素生成控件设置强调色', lang: 'en-US' },
        { code: 'acos()', desc: 'CSS 三角函数返回介于 -1 和 1 之间的数的反余弦值此函数含有单个计算式，此式返回表示介于 0deg 和 180deg 之的  `<angle>` 的弧度数' },
        { code: ':active', desc: '伪类，匹配被用户激活的元素' },
        { code: 'additive-symbols', desc: '描述符定义符号，用于值可累积的可数的 system (en-US)的项', linkParam: '@counter-style/additive-symbols' },
        { code: '::after(:after)', desc: '伪元素，作为已选中元素的最后一个子元素，通常会配合 `content` 属性来为该元素添加装饰内容', linkParam: '::after' },
        { code: 'align-content', desc: '设置了沿弹性盒子布局的纵轴和网格布局的主轴在内容项之间和周围分配空间' },
        { code: 'align-items', desc: '将所有直接子节点上的 `align-self` 值设置为一个组' },
        { code: 'align-self', desc: '对齐当前 grid（块轴） 或 flex 行中（垂直轴）的元素，并覆盖已有的 `align-items` 的值' },
        { code: 'align-tracks', desc: '设置块轴上具有砌体的网格容器砌体轴的对齐方式', lang: 'en-US' },
        { code: 'all', desc: ' 简写属性，将除了 `unicode-bidi` 与 `direction` 之外的所有属性重设至其初始值，或继承值' },
        { code: '<angle>', desc: 'CSS 数据类型，用于表示角的大小，单位为度 `deg`、百分度 `grad`、弧度 `rad` 或圈数 `turn` ', linkParam: 'angle' },
        { code: '<angle-percentage>', desc: 'CSS 数据类型，代表了一种既可以是 `angle` ，也可以是 `percentage` 的数据类型', linkParam: 'angle-percentage' },
        { code: 'animation', desc: 'CSS 动画属性，所有 CSS 动画属性的简写属性形式' },
        { code: 'animation-composition', desc: 'CSS 动画属性，指定当多个动画同时影响同一个属性时要使用的复合操作', lang: 'en-US' },
        { code: 'animation-delay', desc: 'CSS 动画属性，指定从应用动画到元素开始执行动画之前等待的时间量' },
        { code: 'animation-direction', desc: 'CSS 动画属性，设置动画是应正向播放、反向播放还是在正向和反向之间交替播放' },
        { code: 'animation-duration', desc: 'CSS 动画属性，设置动画完成一个动画周期所需的时间' },
        { code: 'animation-fill-mode', desc: 'CSS 动画属性，设置 CSS 动画在执行之前和之后如何将样式应用于其目标' },
        { code: 'animation-iteration-count', desc: 'CSS 动画属性，设置动画序列在停止前应播放的次数' },
        { code: 'animation-name', desc: 'CSS 动画属性，指定一个或多个 `@keyframes` at-rule 的名称，这些 at-rule 描述了要应用于元素的动画' },
        { code: 'animation-play-state', desc: 'CSS 动画属性，设置动画是运行还是暂停' },
        { code: 'animation-timeline', desc: 'CSS 动画属性，指定用于控制动画进度的时间线', lang: 'en-US' },
        { code: 'animation-timing-function', desc: 'CSS 动画属性，定义 CSS 动画在每一动画周期中执行的节奏' },
        { code: '@annotation', desc: '@注解，允许作者在 `font-variant-alternates` 中使用通用名称，用于在 OpenType 中以不同方式激活功能。它允许在使用几种字体时简化 CSS。', linkParam: '@font-feature-values#@annotation' },
        { code: 'annotation()', desc: '控制备用字体的使用。这些替代字体可以通过@font-feature-values中定义的替代名称来引用。', linkParam: 'font-variant-alternates#annotation()' },
        { code: 'appearance', desc: '用于控制 UI 控件的基于操作系统主题的原生外观' },
        { code: 'ascent-override', desc: '定义字体的上升度量。 ascent 指标是 CSS 用于在内联格式化上下文中布置行框的基线以上的高度', lang: 'en-US', linkParam: '@font-face/ascent-override' },
        { code: 'asin()', desc: 'CSS 函数，返回介于 -1 和 1 之间的数的反正弦值。此函数含有单个计算式，此式返回表示介于 -90deg 和 90deg 之间的 `<angle>` 的弧度数' },
        { code: 'aspect-ratio', desc: '规定盒子首选纵横比，这个纵横比可以用于计算 auto 尺寸以及其他布局函数' },
        { code: 'atan()', desc: 'CSS 函数，返回介于 -∞ 和 +∞ 之间的数的反正切值。此函数含有单个计算式，此式返回表示介于 -90deg 和 90deg 之间的 `<angle>` 的弧度数' },
        { code: 'atan2()', desc: 'CSS 函数，返回介于 -infinity 和 infinity 之间的两值的反正切值。此函数接受两个参数，返回表示介于 -180deg 和 180deg 之间的 `<angle>` 的弧度数' },
        { code: 'attr()', desc: 'CSS 函数，用来获取选择到的元素的某一 HTML 属性值，并用于其样式' },
    ],
    B: [
        { code: '::backdrop', desc: '伪元素，在任何处于全屏模式的元素下的即刻渲染的盒子' },
        { code: 'backdrop-filter', desc: '为一个元素后面区域添加图形效果（如模糊或颜色偏移）。因为它适用于元素背后的所有元素，为了看到效果，必须使元素或其背景至少部分透明' },
        { code: 'backface-visibility', desc: '指定当元素背面朝向观察者时是否可见' },
        { code: 'background', desc: ' CSS 简写属性，用于一次性集中定义各种背景属性' },
        { code: 'background-attachment', desc: '决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动' },
        { code: 'background-blend-mode', desc: '定义该元素的背景图片，以及背景色如何混合' },
        { code: 'background-clip', desc: '设置元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面' },
        { code: 'background-color', desc: '设置元素的背景色，属性的值为颜色值或关键字"transparent"二者选其一' },
        { code: 'background-image', desc: '为一个元素设置一个或者多个背景图像' },
        { code: 'background-origin', desc: '规定了指定背景图片 `background-image` 属性的原点位置的背景相对区域' },
        { code: 'background-position', desc: '为每一个背景图片设置初始位置。这个位置是相对于由 `background-origin` 定义的位置图层的' },
        { code: 'background-position-x', desc: '设置水平方向的位置，与每个背景图片等位置层设置属性 `background-origin` 相关' },
        { code: 'background-position-y', desc: '设置初始状态时背景图片在垂直方向上的位置，这个位置相对于通过 `background-origin` 定义的背景层的原点进行定位' },
        { code: 'background-repeat', desc: '定义背景图像的重复方式。背景图像可以沿着水平轴，垂直轴，两个轴重复，或者根本不重复' },
        { code: 'background-size', desc: '设置背景图片大小' },
        { code: '<basic-shape>', desc: '表现基础图形的 CSS 数据类型，作用于 `clip-path` 与 `shape-outside` 属性中' },
        { code: '::before(:before)', desc: '伪元素，匹配选中的元素的第一个子元素。常通过 `content` 属性来为一个元素添加修饰性的内容。此元素默认为行内元素', linkParam: '::before' },
        { code: ':blank', desc: '伪类，选择用户输入为空的输入框' },
        { code: '<blend-mode>', desc: 'CSS 数据类型，用于描述当元素重叠时，颜色应当如何呈现。它被用于 background-blend-mode 和 mix-blend-mode 属性' },
        { code: 'block-size', desc: '根据元素的书写模式定义了元素块的横向或纵向尺寸' },
        { code: 'blur()', desc: 'CSS 方法，将高斯模糊应用于输出图片', linkParam: 'filter-function/blur' },
        { code: 'border', desc: '设置各种单独的边界属性的简写属性' },
        { code: 'border-block', desc: 'CSS 简写属性，用于在样式表中的某处同时设置逻辑块向边框的各属性值' },
        { code: 'border-block-color', desc: '定义了元素的逻辑块向的边框颜色' },
        { code: 'border-block-end', desc: 'CSS 简写属性，在样式表中的某处同时设置逻辑块末边框的各属性值' },
        { code: 'border-block-end-color', desc: '定义了元素的逻辑块末的边框颜色，并根据元素的书写模式、行内方向和文本朝向对应至实体边框颜色' },
        { code: 'border-block-end-style', desc: '定义了元素的逻辑块末的边框线型，并根据元素的书写模式、行内方向和文本朝向对应至实体边框线型' },
        { code: 'border-block-end-width', desc: '定义了元素的逻辑块末的边框宽度，并根据元素的书写模式、行内方向和文本朝向对应至实体边框宽度' },
        { code: 'border-block-start', desc: 'CSS 简写属性，用于在样式表中的某处同时设置逻辑块首边框的各属性值' },
        { code: 'border-block-start-color', desc: '定义了元素的逻辑块首的边框颜色，并根据元素的书写模式、行内方向和文本朝向对应至实体边框颜色' },
        { code: 'border-block-start-style', desc: '定义了元素的逻辑块首的边框线型，并根据元素的书写模式、行内方向和文本朝向对应至实体边框线型' },
        { code: 'border-block-start-width', desc: '定义了元素的逻辑块首的边框宽度，并根据元素的书写模式、行内方向和文本朝向对应至实体边框宽度' },
        { code: 'border-block-style', desc: '定义了元素的逻辑块向的边框线型，并根据元素的书写模式、行内方向和文本朝向对应至实体边框线型' },
        { code: 'border-block-width', desc: '定义了元素的逻辑块向的边框宽度，并根据元素的书写模式、行内方向和文本朝向对应至实体边框宽度' },
        { code: 'border-bottom', desc: 'CSS 简写属性，设置元素下边框' },
        { code: 'border-bottom-color', desc: '设置一个元素底部边框的颜色' },
        { code: 'border-bottom-left-radius', desc: '设置元素左下角的圆角' },
        { code: 'border-bottom-right-radius', desc: '设置元素右下角的圆角' },
        { code: 'border-bottom-style', desc: '设置元素底部边框的线条样式' },
        { code: 'border-bottom-width', desc: '设置元素的底部边框宽度' },
        { code: 'border-collapse', desc: '设置表格的边框是分开的还是合并的' },
        { code: 'border-color', desc: 'CSS 简写属性，设置元素四个边框颜色' },
        { code: 'border-end-end-radius', desc: '定义了元素的逻辑边框半径，并根据元素的书写模式、行内方向和文本朝向对应至实体边框半径' },
        { code: 'border-end-start-radius', desc: '定义了元素的逻辑边框半径，并根据元素的书写模式、行内方向和文本朝向对应至实体边框半径' },
        { code: 'border-image', desc: '为元素的边框设置图像样式' },
        { code: 'border-image-outset', desc: '定义边框图像可超出边框盒的大小' },
        { code: 'border-image-repeat', desc: '定义图片如何填充边框' },
        { code: 'border-image-slice', desc: '将使用 `border-image-source` 引用的图像划分为多个区域' },
        { code: 'border-image-source', desc: '声明元素的边框图片 `border-image` 的资源' },
        { code: 'border-image-width', desc: '指定了 `border image` 的宽度' },
        { code: 'border-inline', desc: 'CSS 简写属性，用于在样式表中的某处同时设置逻辑行向边框的各属性值' },
        { code: 'border-inline-color', desc: ' 定义了元素的逻辑行向的边框颜色，并根据元素的书写模式、行内方向和文本朝向对应至实体边框颜色' },
        { code: 'border-inline-end', desc: 'CSS 简写属性，用于在样式表中的某处同时设置逻辑行末边框的各属性值' },
        { code: 'border-inline-end-color', desc: '定义了元素的逻辑行末的边框颜色，并根据元素的书写模式、行内方向和文本朝向对应至实体边框颜色' },
        { code: 'border-inline-end-style', desc: '定义了元素的逻辑行末的边框线型，并根据元素的书写模式、行内方向和文本朝向对应至实体边框线型' },
        { code: 'border-inline-end-width', desc: '定义了元素的逻辑行末的边框宽度，并根据元素的书写模式、行内方向和文本朝向对应至实体边框宽度' },
        { code: 'border-inline-start', desc: 'CSS 简写属性，用于在样式表中的某处同时设置逻辑行首边框的各属性值' },
        { code: 'border-inline-start-color', desc: '定义了元素的逻辑行首的边框颜色，并根据元素的书写模式、行内方向和文本朝向对应至实体边框颜色' },
        { code: 'border-inline-start-style', desc: '定义了元素的逻辑行首的边框线型，并根据元素的书写模式、行内方向和文本朝向对应至实体边框线型' },
        { code: 'border-inline-start-width', desc: '定义了元素的逻辑行首的边框宽度，并根据元素的书写模式、行内方向和文本朝向对应至实体边框宽度' },
        { code: 'border-inline-style', desc: '定义了元素的逻辑行向的边框线型，并根据元素的书写模式、行内方向和文本朝向对应至实体边框线型' },
        { code: 'border-inline-width', desc: '定义了元素的逻辑行向的边框宽度，并根据元素的书写模式、行内方向和文本朝向对应至实体边框宽度' },
        { code: 'border-left', desc: 'CSS 简写属性，设置元素左边框样式' },
        { code: 'border-left-color', desc: '设置元素的左边框颜色' },
        { code: 'border-left-style', desc: '设置元素左边框的线条样式' },
        { code: 'border-left-width', desc: '设置元素左边框的宽度' },
        { code: 'border-radius', desc: '设置元素的外边框圆角' },
        { code: 'border-right', desc: 'CSS 简写属性，设置元素右边框样式' },
        { code: 'border-right-color', desc: '设置元素的右边框颜色' },
        { code: 'border-right-style', desc: '设置元素右边框的线条样式' },
        { code: 'border-right-width', desc: '设置元素右边框的宽度' },
        { code: 'border-spacing', desc: '指定相邻单元格边框之间的距离（只适用于 边框分离模式 `border-collapse` ）' },
        { code: 'border-start-end-radius', desc: '定义了元素的逻辑边框半径，并根据元素的书写模式、行内方向和文本朝向对应至实体边框半径' },
        { code: 'border-start-start-radius', desc: ' 定义了元素的逻辑边框半径，并根据元素的书写模式、行内方向和文本朝向对应至实体边框半径' },
        { code: 'border-style', desc: ' CSS 简写属性，用来设定元素所有边框的样式' },
        { code: 'border-top', desc: 'CSS 简写属性，设置元素上边框样式' },
        { code: 'border-top-color', desc: '设置元素的上边框颜色' },
        { code: 'border-top-style', desc: '设置元素右边框的线条样式' },
        { code: 'border-top-width', desc: '设置元素上边框的宽度' },
        { code: 'border-top-left-radius', desc: '设置元素左上角的圆角效果' },
        { code: 'border-top-right-radius', desc: '属性设置元素的右上角的圆角效果' },
        { code: 'border-width', desc: '设置盒子模型的边框宽度' },
        { code: 'bottom', desc: '定义了定位元素下外边距边界与其包含块下边界之间的偏移，非定位元素设置此属性无效（ `bottom` 的效果取决于元素的 `position` 属性）' },
        { code: 'box-decoration-break', desc: '定义当元素跨多行、多列或多页时，元素的片段应如何呈现' },
        { code: 'box-shadow', desc: '在元素的框架上添加阴影效果' },
        { code: 'box-sizing', desc: '定义了 `user agent` 应该如何计算一个元素的总宽度和总高度' },
        { code: 'break-after', desc: '设置在生成的盒子之后的页面，列或区域中断行为（换句话说，如何以及是否中断）。如果没有生成的盒子，则该属性将被忽略' },
        { code: 'break-before', desc: '定义页面，列或区域在生成的盒子之前应如何处理中断。如果没有生成的盒子，则忽略该属性' },
        { code: 'break-inside', desc: '设置在多列布局页面下的内容盒子如何中断，如果多列布局没有内容盒子，这个属性会被忽略' },
        { code: 'brightness()', desc: 'CSS函数，将线性乘数应用于输入图像，使其看起来更亮或更暗', linkParam: 'filter-function/brightness' },
    ],
    C: [
        { code: 'calc()', desc: 'CSS函数，允许在声明 CSS 属性值时执行一些计算' },
    ]
}